{
    "instruction": "You are an experienced researcher, I will give you some scientific research papers in the same field. Please read them carefully and write a summary about them.\n\nHere are the papers:\n\n<paper 1>\n\\title{Point-BERT: Pre-training 3D Point Cloud Transformers with \\\\ Masked Point Modeling}\n\n\\begin{document}\n\n\\title{Point-BERT: Pre-training 3D Point Cloud Transformers with \\\\ Masked Point Modeling}\n\t\n\t\\author{\n\tXumin Yu\\thanks{Equal contribution. ~\\textsuperscript{\\dag}Corresponding author.} $  ^{,1}$,\n\tLulu Tang$^{*,1,2}$, \n\tYongming Rao$^{*,1}$, \n\tTiejun Huang$^{2,3}$, \n\tJie Zhou$^{1}$, \n\tJiwen Lu$^{\\dagger,1,2}$      \\\\\n    $^1$Tsinghua University ~~\t$^2$BAAI ~~  $^3$Peking University  \\\\\n\t}\n\t\n\t\\maketitle\n\t\\begin{abstract}\n    We present \\textit{Point-BERT}, a new paradigm for learning Transformers to generalize the concept of BERT\\cite{bert} to 3D point cloud. Inspired by BERT, we devise a Masked Point Modeling (MPM) task to pre-train point cloud Transformers. Specifically,  we first divide a point cloud into several local point patches, and a point cloud \\textit{Tokenizer} with a discrete Variational AutoEncoder (dVAE) is designed to generate discrete point tokens containing meaningful local information. Then, we randomly mask out some patches of input point clouds and feed them into the backbone Transformers. The pre-training objective is to recover the original point tokens at the masked locations under the supervision of point tokens obtained by the \\textit{Tokenizer}. Extensive experiments demonstrate that the proposed  BERT-style pre-training strategy significantly improves the performance of standard point cloud Transformers. Equipped with our pre-training strategy, we show that a pure Transformer architecture attains 93.8\\% accuracy on ModelNet40 and 83.1\\% accuracy on the hardest setting of ScanObjectNN, surpassing carefully designed point cloud models with much fewer hand-made designs. We also demonstrate that the representations learned by Point-BERT transfer well to new tasks and domains, where our models largely advance the state-of-the-art of few-shot point cloud classification task. The code and pre-trained models are available at \\url{https://github.com/lulutang0608/Point-BERT}.\n\t\\end{abstract}\n\t\n\t\\section{Introduction}\t\\label{sec:intro}\n  Compared to conventional hand-crafted feature extraction methods, Convolutional Neural Networks (CNN)\\cite{CNN} is dependent on much less prior knowledge. Transformers\\cite{vaswani2017attention} have pushed this trend further as a step towards no inductive bias with minimal man-made assumptions, such as translation equivalence or locality in CNNs. Recently, the structural superiority and versatility of standard Transformers are proved in both language \\cite{bert,brown2020language,radford2019language,joshi2020spanbert,liu2019roberta} and image tasks\\cite{vit,zhu2020deformable,touvron2021training,xie2021self,chen2020generative,beit}, and the capability of diminishing the inductive biases is also justified by enabling more parameters, more data\\cite{vit}, and longer training schedules. While Transformers produce astounding results in Natural Language Processing (NLP) and image processing, it is not well studied in the 3D community. Existing Transformer-based point cloud models\\cite{zhao2021point,guo2021pct} bring in certain inevitable inductive biases from local feature aggregation\\cite{zhao2021point} and neighbor embedding \\cite{guo2021pct}, making them deviate from the mainstream of standard Transformers. To this end, we aim to apply standard Transformers on point cloud directly with minimal inductive bias, as a stepping stone to a neat and unified model for 3D representation learning. \n  \n\\begin{figure}[t]\n\\centering \\includegraphics[width=\\linewidth]{fig1.pdf}\n\\caption{\\small \\textbf{Illustration of our main idea.}  Point-BERT is designed for pre-training of standard point cloud Transformers. By training a dVAE via point cloud reconstruction, we can convert a point cloud into a sequence of discrete point tokens. Then we are able to pre-train the Transformers with a Mask Point Modeling (MPM) task by predicting the masked tokens. \n}\n\\vspace{-10pt}\n\\label{fig:insigt} \n\\end{figure}\n\n\\begin{figure*}[t]\n\\centering\n\\includegraphics[width = 0.95\\linewidth]{vis_combine.pdf}\n\\caption{\\small \\textbf{Masked point clouds reconstruction using our Point-BERT model trained on ShapeNet.} \nWe show the reconstruction results of synthetic objects from ShapeNet test set with block masking and random masking in the first two groups respectively. Our model also generalize well to unseen real scans from ScanObjectNN (the last two groups). } \n\\vspace{-7pt}\n\\label{fig:vis} \n\\end{figure*}\n\t\t\nApparently, the straightforward adoption of Transformers does not achieve satisfactory performance on point cloud tasks (see Figure~\\ref{fig:curve}). This discouraging result is partially attributed to the limited annotated 3D data since pure Transformers with no inductive bias need massive training data. For example, ViT\\cite{vit} uses ImageNet\\cite{CNN} (14M images) and JFT\\cite{jft} (303M images) to train vision Transformers. In contrast, accurate annotated point clouds are relatively insufficient. Despite the 3D data acquisition is getting easy with the recent proliferation of modern scanning devices, labeling point clouds is still time-consuming, error-prone, and even infeasible in some extreme real-world scenarios. The difficulty motivates a flux of research into learning from unlabelled 3D data.  Self-supervised pre-training thereby becomes a viable technique to unleash the scalability and generalization of Transformers for 3D point cloud representation learning.\n\nAmong all the Transformer-based pre-training models, BERT\\cite{bert} achieved state-of-the-art performance at its released time, setting a milestone in the NLP community. Inspired by BERT\\cite{bert}, we seek to exploit the BERT-style pre-training for 3D point cloud understanding.  However, it is challenging to directly employ BERT on point clouds due to a lack of pre-existing vocabulary. In contrast, the language vocabulary has been well-defined (e.g., WordPiece in \\cite{bert}) and off-the-shelf for model pre-training. In terms of point cloud Transformers, there is no pre-defined vocabulary for point clouds.  A naive idea is to treat every point as a `word' and mimic BERT\\cite{bert} to predict the coordinates of masked points.  Such a point-wise regression task surges computational cost quadratically as the number of tokens increases. Moreover, a word in a sentence contains basic contextual semantic information, while a single point in a point cloud barely entails semantic meaning. \n\t\nNevertheless, a local patch partitioned from a holistic point cloud contains plentiful geometric information and can be treated as a component unit.   \n\\textit{What if we build a vocabulary where different tokens represent different geometric patterns of the input units?} \nAt this point, we can represent a point cloud as a sequence of such tokens. Now, we can favorably adopt BERT and its efficient implementations almost out of the box. We hypothesize that bridging this gap is a key to extending the successful Transformers and BERT to the 3D vision domain. \n\n\t\nDriven by the above analysis, we present Point-BERT, a new scheme for learning point cloud Transformers. Two essential components are conceived: 1) Point Tokenization:  A  point cloud \\textit{Tokenizer} is devised via a dVAE-based~\\cite{rolfe2016discrete} point cloud reconstruction, where a point cloud can be converted into discrete point tokens according to the learned vocabulary. We expect that point tokens should imply local geometric patterns, and the learned vocabulary should cover diverse geometric patterns, such that a sequence of such tokens can represent any point cloud (even never seen before). 2) Masked Point Modeling: A `masked point modeling' (MPM) task is performed to pre-train Transformers, which masks a portion of input point cloud and learns to reconstruct the missing point tokens at the masked regions. We hope that our model enables reasoning the geometric relations among different patches of the point cloud, capturing meaningful geometric features for point cloud understanding.\n\nBoth two designs are implemented and justified in our experiments. \nWe visualize the reconstruction results both on the synthetic (ShapeNet\\cite{shapenet}) and real-world (ScanObjectNN\\cite{uy2019revisiting}) datasets in Figure \\ref{fig:vis}. We observe that Point-BERT correctly predicts the masked tokens and infers diverse, holistic reconstructions through our dVAE decoder. The results suggest that the proposed model has learned inherent and generic knowledge of 3D point clouds, i.e, geometric patterns or semantics. More significantly, our model is trained on  ShapeNet, the masked point predictions on ScanObjectNN reflect its superior performance on challenging scenarios with both unseen objects and domain gaps. \n\n Our Point-BERT with a pure Transformer architecture and BERT-style pre-training technique achieves  93.8\\% accuracy on ModelNet40 and 83.1\\% accuracy on the complicated setting of ScanObjectNN, surpassing carefully designed point cloud models with much fewer human priors. We also show that the representations learned by Point-BERT transfer well to new tasks and domains, where our models largely advance the state-of-the-art of few-shot point cloud classification task. We hope a neat and unified Transformer architecture across images and point clouds could facilitate both domains since it enables joint modeling of 2D and 3D visual signals. \n\n\\section{Related Work}\n\t\n\n\\paragrapha{Self-supervised Learning (SSL).} SSL is a type of unsupervised learning, where the supervision signals can be generated from the data itself\\cite{hinton2020aaai}. The core idea of SSL is to define a pretext task, such as jigsaw puzzles \\cite{jigsaw}, colorization\\cite{colorization}, and optical-flow\\cite{optical-flow} in images. More recently, several studies suggested using SSL techniques for point cloud understanding\\cite{moco, infoce,pointcontrast,li2018so,Jigsaw3D,foldingnet,occo,rao2020global,eckart2021self,info3d,MD}. Example 3D pretext tasks includes orientation estimation\\cite{Rotation3D},  deformation reconstruction\\cite{achituve2021self}, geometric structural cues\\cite{MortonNet} and spatial cues\\cite{mersch2021self,sharma2020self}. Inspired by the jigsaw puzzles in images\\cite{jigsaw}, \\cite{Jigsaw3D} proposes to reconstruct point clouds from the randomly rearranged parts. A contrastive learning framework is proposed by DepthContrast \\cite{DepthContrast} to learn representations from depth scans. More recently, OcCo\\cite{occo} describes an encoder-decoder mechanism to reconstruct the occluded point clouds. Different from these studies, we attempt to explore a point cloud SSL model following the successful Transformers\\cite{vaswani2017attention}.\n\t\n\\begin{figure*}[t]\n\\centering \n\\includegraphics[width=\\linewidth]{fig2.pdf}\n\\caption{ \\small \\textbf{The pipeline of Point-BERT.} We first partition the input point cloud into several point patches (sub-clouds).  A mini-PointNet\\cite{pointnet} is then used to obtain a sequence of point embeddings. Before pre-training, a \\textit{Tokenizer} is learned through dVAE-based point cloud reconstruction (as shown in the right part of the figure), where a point cloud can be converted into a sequence of discrete point tokens; During pre-training, we mask some portions of point embeddings and replace them with a mask token. The masked point embeddings are then fed into the Transformers. The model is trained to recover the original point tokens, under the supervision of point tokens obtained by the \\textit{Tokenizer}. We also add an auxiliary  contrastive learning task to help the Transformers to capture high-level semantic knowledge.}\n\\label{fig:pipeline} \\vspace{-10pt}\n\\end{figure*}\n\t\n\\paragrapha{Transformers.} Transformers\\cite{vaswani2017attention} have become the dominant framework in NLP\\cite{bert,brown2020language,radford2019language,joshi2020spanbert,liu2019roberta} due to its salient benefits, including massively parallel computing, long-distance characteristics, and minimal inductive bias. It has intrigued various vision tasks\\cite{khan2021Transformers,han2020survey}, such as object classification\\cite{vit,chen2020generative},  detection\\cite{carion2020end,zhu2020deformable} and segmentation\\cite{zheng2021rethinking,wang2021max}.\nNevertheless, its applications on point clouds remain limited. Some preliminary explorations have been implemented\\cite{zhao2021point,guo2021pct,yu2021pointr}. For instance, \\cite{zhao2021point} applies the vectorized self-attention mechanism to construct a point Transformer layer for 3D point cloud learning. \\cite{guo2021pct} uses a more typical Transformer architecture with neighbor embedding to learn point clouds. Nevertheless, prior efforts for Transformer-based point cloud models more or less involve some inductive biases, making them out of the line with  standard Transformers.  In this work, we seek to continue the success of standard Transformers and extend it to point cloud learning with minimal inductive bias. \n\t\n\\paragrapha{BERT-style Pre-training.} The main architecture of BERT\\cite{bert} is built upon a  multi-layer Transformer encoder, which is first designed to pre-train bidirectional representations from the unlabeled text in a self-supervised scheme. The primary ingredient that helps BERT stand out and achieve impressive performance is the pretext of Masked Language Modeling (MLM), which first randomly masks and then recovers a sequence of input tokens.\n\tThe MLM strategy has also inspired a lot of pre-training tasks\\cite{joshi2020spanbert,liu2019roberta,conneau2019cross,trinh2019selfie,beit}. Take BEiT\\cite{beit} for example, it first tokenizes the input image into discrete visual tokens. After that, it randomly masks some image patches and feeds the corrupted images into the Transformer backbone. The model is trained to recover the visual tokens of the masked patches.   More recently, MAE\\cite{mae}  presents a masked autoencoder strategy for image representation learning. It first masks random patches of the input image and then encourages the model to reconstruct those missing pixels. Our work is greatly inspired by BEiT\\cite{beit}, which encodes the image into discrete visual tokens so that a Transformer backbone can be directly applied to these visual tokens. However, it is more challenging to acquire tokens for point clouds due to the unstructured nature of point clouds, which subsequently hinders the straightforward use of BERT on point clouds. \n\n\\section{Point-BERT}\n\\label{sec:app}\n\t\nThe overall objective of this work is to extend the BERT-style pre-training strategy to point cloud Transformers.\tTo achieve this goal, we first learn a  \\textit{Tokenizer} to obtain discrete point tokens for each input point cloud.  Mimicking the `MLM' strategy in BERT\\cite{bert}, we devise a `masked point modeling' (MPM) task to pre-train Transformers with the help of those discrete point tokens. The overall idea of our approach is illustrated in Figure~\\ref{fig:pipeline}. \n\n\t\n\\subsection{Point Tokenization} \\label{p:dvae}\n\n\\paragrapha{Point Embeddings.} \nA naive approach treats per point as one token. However, such a point-wise reconstruction task tends to unbearable computational cost due to the quadratic complexity of self-attention in Transformers. Inspired by the patch embedding strategy in Vision Transformers~\\cite{vit}, we present a simple yet efficient implementation that groups each point cloud into several local patches (sub-clouds). Specifically, given an input point cloud $ p\\in \\mathbb{R}^{N\\times 3}$, we first sample $g$ center points from the holistic point cloud $ p$ via farthest point sampling (FPS). The k-nearest neighbor (kNN) algorithm is then used to select the $n$ nearest neighbor points for each center point, grouping $g$ local patches (sub-clouds) $\\left \\{  p_{i} \\right \\}_{i=1}^{g}$.  We then make these local patches unbiased by subtracting their center coordinates, disentangling the structure patterns and spatial coordinates of the local patches. These unbiased sub-clouds can be treated as words in NLP or image patches in the vision domain. We further adopt a mini-PointNet\\cite{pointnet} to project those sub-clouds into point embeddings. Following the practice of Transformers in NLP and 2D vision tasks, we represent a point cloud as a sequence of point embeddings $\\left \\{  f_{i} \\right \\}_{i=1}^{g}$, which can be received as inputs to standard Transformers.\n\n\\paragrapha{Point Tokenizer.}\nPoint \\textit{Tokenizer}  takes point embeddings $\\left \\{  f_{i} \\right \\}_{i=1}^{g}$ as the inputs and converts them into discrete point tokens. Specifically, the \\textit{Tokenizer} $\\mathcal{Q}_{\\phi}(z|f)$  maps point embeddings $\\left \\{  f_{i} \\right \\}_{i=1}^{g}$ into discrete point tokens $\\mathbf{z}=[z_{1},z_{2},....,z_{g}] \\in \\mathcal{V} $~\\footnote{Point tokens have two forms, discrete integer number and corresponding word embedding in $\\mathcal{V}$, which are equivalent.}, where $\\mathcal{V}$ is the learned vocabulary with total length of $N$. In this step, the sub-clouds  $\\left \\{  p_{i} \\right \\}_{i=1}^{g}$ can be tokenized into  point tokens $\\left \\{  z_{i} \\right \\}_{i=1}^{g}$, relating to  effective local geometric patterns. In our experiments, DGCNN\\cite{wang2019dynamic} is employed as our \\textit{Tokenizer} network.\n\t\n\\paragrapha{Point Cloud Reconstruction.}  The decoder  $\\mathcal{P}_{\\varphi }(p|z)$ of dVAE receives point tokens $\\left \\{  z_{i} \\right \\}_{i=1}^{g}$  as the inputs and learns to reconstruct the corresponding sub-clouds $\\left \\{  p_{i} \\right \\}_{i=1}^{g}$. Since the local geometry structure is too complex to be represented by the limited $N$ situations. We adopt a DGCNN\\cite{wang2019dynamic} to build the relationship with neighboring point tokens, which can enhance the representation ability of discrete point tokens for diverse local structures. After that, a FoldingNet\\cite{foldingnet} is used to reconstruct the sub-clouds.\n\t\nThe overall reconstruction objective can be written as $\\mathbb{E}_{z\\sim \\mathcal{Q}_{\\phi}(z|p)} \\left [ \\textup{ log  } \\mathcal{P}_{\\varphi  }(p|z) \\right ]$, and the reconstruction procedure can be viewed as maximizing the evidence lower bound (ELB) of the log-likelihood $\\mathcal{P}_{\\theta }(p|\\tilde{p})$\\cite{ramesh2021zero}:\n\\small\t\n\\begin{equation} \\label{eq:elb}\n\\begin{split}\t\n\t\\sum_{(p_{i},\\tilde{p}_{i})\\in\\mathcal{D}}\\textup{log} \\mathcal{P}_{\\theta }(p_{i}|\\tilde{p}_{i}) \\geq   \\sum_{(p_{i},\\tilde{p}_{i})\\in\\mathcal{D}}(\\mathbb{E}_{z_{i}\\sim \\mathcal{Q}_{\\phi}(\\mathbf{z}|p_{i})} \\left [ \\textup{ log  } \\mathcal{P}_{\\varphi  }(p_{i}|z_{i}) \\right ]   \\\\\n\t- D_{\\textup{KL}} [\\mathcal{Q}_{\\phi}(\\mathbf{z}|p_{i}),\\mathcal{P}_{\\varphi }(\\mathbf{z}|\\tilde{p}_{i})  ] ),   \\qquad \\qquad \\quad    (1)\\nonumber%\n\\end{split}%\n\\end{equation}%\n\\normalsize\nwhere $p$ denotes the original point cloud, $\\tilde{p}$ denotes the reconstructed point cloud. Since the latent point tokens are discrete, we cannot apply the reparameterization gradient to train the dVAE. Following \\cite{ramesh2021zero}, we use the Gumbel-softmax relaxation\\cite{jang2016categorical} and a uniform prior during dVAE training. Details about dVAE architecture and its implementation can be found in the supplementary.\n\n\\subsection{Transformer Backbone}\nWe adopt the standard Transformers~\\cite{vaswani2017attention} in our experiments, consisting of multi-headed self-attention layers and FFN blocks. For each input point cloud, we first divide  it into $g$ local patches with center points $\\{c_i\\}_{i=1}^g$.  Those local patches are then projected into point embeddings $\\{f_i\\}_{i=1}^g$  via a mini-PointNet~\\cite{pointnet}, which consists of only MLP layers and the global \\texttt{maxpool} operation. We further obtain the positional embeddings $\\{pos_i\\}$ of each patch by applying  an MLP  on its  center point $\\{c_i\\}$.  Formally, we define the input embeddings as $\\{x_i\\}_{i=1}^g$, which is the combination of point embeddings $\\{f_i\\}_{i=1}^g$ and positional embeddings $\\{pos_i\\}_{i=1}^g$. Then, we send the input embeddings  $\\{x_i\\}_{i=1}^g$ into the Transformer. Following~\\cite{bert}, we append a class token $\\mathbf{E}[\\textup{s}]$ to the input sequences. Thus, the input sequence of Transformer can be expressed as $ H^{0}=\\left \\{ \\mathbf{E}[\\textup{s}],  x_{1},  x_{2}, \\cdots ,  x_{g} \\right \\}$. There are $L$ layers of Transformer block, and the output of the last layer $ H^{L}= \\left \\{  h_{\\textup{s}}^{L},  h_{1}^{L}, \\cdots ,  h_{g}^{L}\\right \\}$ represents the global feature, along with the encoded representation of the input sub-clouds. \n\n\\subsection{Masked Point Modeling}\n\nMotivated by BERT\\cite{bert} and BEiT\\cite{beit}, we extend the masked modeling strategy to point cloud learning and devise a masked point modeling (MPM) task for Point-BERT. \t\t\t\n\n\\paragrapha{Masked Sequence Generation.}  Different from the random masking used in  BERT~\\cite{bert} and MAE\\cite{mae}, we adopt a block-wise masking strategy like~\\cite{beit}. Specifically, we first choose a center point $c_{i}$ along with its sub-cloud $p_{i}$, and then find its $m$ neighbor sub-clouds, forming a continuous local region. We mask out all local patches in this region to generate the masked point cloud.  In practice, we directly apply such a block-wise masking strategy like~\\cite{beit} to the inputs of the Transformer.  Formally, we mark the masked positions as $\\mathcal{M}\\in \\left \\{ 1,\\cdots ,g \\right \\}^{\\lfloor rg  \\rfloor}$, where $r$ is the mask ratio. Next, we replace all the masked point embeddings with a same learnable pre-defined mask embeddings $\\mathbf{E}[\\textup{M}]$ while keeping its positional embeddings unchanged. Finally, the corrupted input embeddings $\n\\textup{X}^{\\mathcal{M}}=\\left \\{   x_{i}: i\\notin \\mathcal{M}   \\right \\}_{i=1}^{g}   \\cup  \\left \\{ \\mathbf{E}[\\textup{M}] + {pos}_i :i\\in  \\mathcal{M} \\right \\}_{i=1}^{g} $ are fed into the Transformer encoder.\n\n\\paragrapha{Pretext Task Definition.}\nThe goal of our MPM task is to enable the model to infer the geometric structure of missing parts based on the remaining ones.  The pre-trained dVAE (see section~\\ref{p:dvae})  encodes each local patch into discrete point tokens,  representing the geometric patterns. Thus, we can directly apply those informative tokens as our surrogate supervision signal to pre-train the Transformer. \n \n \\paragrapha{Point Patch Mixing. } Inspired by the CutMix\\cite{cutmix,pointcutmix} technique, we additionally devise a neat mixed token prediction task as an auxiliary pretext task to increase the difficulty of pre-training in our Point-BERT, termed as `Point Patch Mixing'. Since the information of the absolute position of each sub-cloud has been excluded by normalization, we can create new virtual samples by simply mixing two groups of sub-clouds without any cumbersome alignment techniques between different patches, such as optimal transport~\\cite{pointcutmix}. During pre-training, we also force the virtual sample to predict the corresponding tokens generated by the original sub-cloud to perform the MPM task. In our implementation, we generate the same number of virtual samples as the real ones to make the pre-training task more challenging, which is helpful to improve the training of Transformers with limited data as observed in~\\cite{touvron2021training}.\n\t\n\\paragrapha{Optimization Objective. } The goal of MPM task is to recover the point tokens that are corresponding to the masked locations. The pre-training objective can be formalized as maximizing the log-likelihood of the correct point tokens $z_{i}$ given the masked input embeddings $\\textup{X}^{\\mathcal{M}}$:\n\\small\\begin{equation}\n\t\\textup{max}\\sum_{\\textup{X}\\in D}^{}\\mathbb{E}_{\\mathcal{M}}\\left [   \\sum_{i\\in \\mathcal{M}  }^{} \\textup{log} \\mathcal{P}\\left (  z_{i} | \\textup{X}^{\\mathcal{M}}\\right ) \\right ].  \\quad    (2)\n\t\\nonumber\n\\end{equation}\\normalsize\nMPM task encourages the model to predict the masked geometric structure of the point clouds.  Training the Transformer only with MPM task leads to an unsatisfactory understanding on high-level semantics of the point clouds, which is also pointed out by the recent work in 2D domain~\\cite{ibot}. So we adopt the widely used contrastive learning method MoCo~\\cite{moco} as a tool to help the Transformers to better learn high-level semantics. With our point patch mixing technique, the optimization of contrastive loss encourages the model to pay attention to the high-level semantics of point clouds by making features of the virtual samples as closely as possible to the corresponding features from the original samples. Let $q$ be the feature of a mixed sample that comes from two other samples, whose features are $k^{+}_1$ and $k^{+}_2$ ($\\{k_i\\}$ are extracted by the momentum feature encoder~\\cite{moco}). Assuming the mixing ratio is $r$, the contrastive loss can be written as:\n\\small\\begin{equation}\n\t\\mathcal{L}_q = -r \\textup{log} \\frac{\\textup{exp}(qk^{+}_1/ \\tau)}{\\sum_{i=0}^K \\textup{exp}(qk_i/\\tau)} - (1-r) \\textup{log} \\frac{\\textup{exp}(qk^{+}_2/ \\tau)}{\\sum_{i=0}^K \\textup{exp}(qk_i/\\tau)}),    (3)\n\t\\nonumber\n\\end{equation}\\normalsize\nwhere $\\tau$ is the temperature and $K$ is the size of memory bank. Coupling MPM objective and contrastive loss enables our Point-BERT to simultaneously capture the local geometric structures and high-level semantic patterns, which are crucial in point cloud representation learning. \n\n\t\n\\section{Experiments}\nIn this section, we first introduce the setups of our pre-training scheme. Then we evaluate the proposed model with various downstream tasks, including object classification, part segmentation, few-shot learning and transfer learning. We also conduct an ablation study for our Point-BERT. \n\n\\subsection{Pre-training Setups} \n\n\\paragrapha{Data Setups.} ShapeNet~\\cite{shapenet} is used as our pre-training dataset, which covers over 50,000 unique 3D models from 55 common object categories. We sample 1024 points from each 3D model and divide them into 64 point patches (sub-clouds). Each sub-cloud contains 32 points.  A lightweight PointNet\\cite{pointnet} containing two-layer MLPs is adopted to project each sub-cloud into 64 point embeddings, which are used as input both for dVAE and Transformer. \n\n\\begin{table}[t]\n\\small\n\\caption{\\textbf{Comparisons of Point-BERT with of state-of-the-art models on  ModelNet40. } We report the classification accuracy (\\%) and the number of points in the input. [ST] and [T] represent the standard Transformers models and Transformer-based models with some special designs and more inductive biases, respectively.\n}  \\vspace{-5pt}\n\\centering\n\\label{tab:cls}\n\\setlength{\\tabcolsep}{18pt}\n\\begin{tabular}{@{\\hskip 5pt}>{\\columncolor{white}[5pt][\\tabcolsep]}lc>{\\columncolor{white}[\\tabcolsep][5pt]}l@{\\hskip 5pt}}\n\\toprule\nMethod  &  $\\#$point & Acc.\\\\\n\\midrule\nPointNet\\cite{pointnet} &  1k &89.2\\\\\nPointNet++ \\cite{pointnet2}&  1k &90.5\\\\\nSO-Net\\cite{li2018so} &  1k &92.5\\\\\nPointCNN\\cite{li2018pointcnn} &  1k &92.2\\\\\nDGCNN\\cite{wang2019dynamic} &  1k &92.9\\\\\nDensePoint\\cite{densepoint}&  1k &92.8\\\\\nRSCNN\\cite{rao2020global}&  1k &92.9\\\\\nKPConv\\cite{thomas2019kpconv} & $\\sim$6.8k& 92.9\\\\\n\\midrule\t\t\n$\\left [ \\textup{T}\\right ]$ PCT\\cite{guo2021pct} &  1k & 93.2  \\\\\n$\\left [ \\textup{T}\\right ]$ PointTransformer\\cite{zhao2021point} & -- & {93.7}  \\\\\n$\\left [ \\textup{ST}\\right ]$ NPCT\\cite{guo2021pct} &  1k & 91.0 \\\\\n\\hline\n$\\left [ \\textup{ST}\\right ]$ Transformer &  1k & 91.4 \\\\\n$\\left [ \\textup{ST}\\right ]$ Transformer + OcCo~\\cite{occo} &  1k & 92.1 \\\\\n\\rowcolor{Gray}  $\\left [ \\textup{ST}\\right ]$ Point-BERT  & 1k & 93.2\\\\\n\\midrule\n$\\left [ \\textup{ST}\\right ]$ Transformer&  4k & 91.2  \\\\\n$\\left [ \\textup{ST}\\right ]$ Transformer + OcCo~\\cite{occo} & 4k &92.2 \\\\\n\\rowcolor{Gray} $\\left [ \\textup{ST}\\right ]$ Point-BERT & 4k & 93.4\\\\\n\\rowcolor{Gray} $\\left [ \\textup{ST}\\right ]$ Point-BERT & 8k & \\textbf{93.8}\\\\\n\\bottomrule\n\\end{tabular} \n\\vspace{-15pt}\n\\end{table}\n\t\n\\paragrapha{dVAE Setups.} We use a four-layer DGCNN\\cite{wang2019dynamic} to learn the inter-patch relationships, modeling the internal structures of input point clouds. During dVAE training, we set the vocabulary size $N$ to 8192. Our decoder is also a DGCNN architecture followed by a FoldingNet~\\cite{foldingnet}. It is worth noting that the performance of dVAE is susceptible to hyper-parameters, which makes that the configurations of image-based dVAE~\\cite{ramesh2021zero} cannot be directly used in our scenarios. The commonly used $\\ell_1$-style Chamfer Distance loss is employed during the reconstruction procedure. Since the value of this $\\ell_1$ loss is numerically small, the weight of KLD loss in Eq.\\ref{eq:elb} must be smaller than that in the image tasks. We set the weight of KLD loss to 0 in the first 10,000 steps and gradually increased to 0.1 in the following 100,000 steps. The learning rate is set to 0.0005 with a cosine learning schedule with 60,000 steps warming up. We decay the temperature in Gumble-softmax function from 1 to 0.0625 in 100,000 steps following~\\cite{ramesh2021zero}.  We train dVAE for a total of 150,000 steps with a batch size of 64.  \n\n\\paragrapha{MPM Setups.} In our experiments, we set the depth for the Transformer to 12, the feature dimension to 384, and the number of heads to 6. The stochastic depth~\\cite{huang2016deep} with a 0.1 rate is applied in our transformer encoder. During MPM pre-training, we fix the weights of \\textit{Tokenizer} learned by dVAE. 25\\% $\\sim$ 45\\% input point embeddings are randomly masked out. The model is then trained to infer the expected point tokens at those masked locations. In terms of MoCo, we set the memory bank size to 16,384, temperature to 0.07, and weight momentum to 0.999. We employ an AdamW\\cite{adamw} optimizer, using an initial learning rate of 0.0005 and a weight decay of 0.05.  The model is trained for 300 epochs with a batch size of 128. \n\t\n\\subsection{Downstream Tasks}\n\n\\begin{table}[t] \n\\caption{\\small \\textbf{Few-shot classification results on ModelNet40.} We report the average accuracy (\\%) as well as the standard deviation over  10 independent experiments.}  \\vspace{-5pt}\n\\newcolumntype{g}{>{\\columncolor{Gray}}c}\n\\label{tab:few-shot}\n\\centering\n\\setlength{\\tabcolsep}{4pt}{\n\\begin{adjustbox}{width=\\linewidth} \\small\n\\begin{tabular}{lcccc}\n\\toprule\n\\multirow{2}[0]{*}{} & \\multicolumn{2}{c}{\\textbf{5-way}} & \\multicolumn{2}{c}{\\textbf{10-way}} \\\\\n\\cmidrule(lr){2-3}\\cmidrule(lr){4-5} \n& 10-shot & 20-shot & 10-shot & 20-shot \\\\\n\\midrule\nDGCNN-rand\\cite{occo} &31.6 $\\pm$ 2.8 &  40.8 $\\pm$ 4.6&  19.9 $\\pm$  2.1& 16.9 $\\pm$ 1.5\\\\\nDGCNN-OcCo\\cite{occo}&90.6 $\\pm$ 2.8 & 92.5 $\\pm$ 1.9 &82.9 $\\pm$ 1.3 &86.5 $\\pm$ 2.2 \\\\\n\\midrule\nDGCNN-rand$^*$ &91.8 $\\pm$ 3.7 & 93.4 $\\pm$ 3.2 & 86.3 $\\pm$ 6.2 &90.9 $\\pm$ 5.1 \\\\\nDGCNN-OcCo$^*$ & 91.9 $\\pm$ 3.3& 93.9 $\\pm$ 3.1  & 86.4 $\\pm$ 5.4 & 91.3 $\\pm$ 4.6\\\\\nTransformer-rand & 87.8 $\\pm$ 5.2& 93.3 $\\pm$ 4.3 & 84.6 $\\pm$ 5.5 & 89.4 $\\pm$ 6.3\\\\\nTransformer-OcCo& 94.0 $\\pm$ 3.6& 95.9 $\\pm$ 2.3 & 89.4 $\\pm$ 5.1 & 92.4 $\\pm$ 4.6 \\\\\n\\rowcolor{Gray}Point-BERT & \\textbf{94.6 $\\pm$ 3.1} & \\textbf{96.3 $\\pm$ 2.7} &  \\textbf{91.0 $\\pm$ 5.4} & \\textbf{92.7 $\\pm$ 5.1} \\\\\n\\bottomrule\n\\end{tabular}\n\\end{adjustbox}} \n\\vspace{-15pt}\n\\end{table}\n\nIn this subsection, we report the experimental results on downstream tasks. Besides the widely used benchmarks, including classification and segmentation, we also study the model's capacity on few-shot learning and transfer learning.\n\n\\begin{table*}[t]\n\\caption{\\small \\textbf{Part segmentation results on the ShapeNetPart dataset}. We report the mean IoU across all part categories mIoU$_C$ (\\%) and the mean IoU across all instance mIoU$_I$  (\\%) , as well as the IoU (\\%) for each categories. }   \\vspace{-5pt}\n\\label{tab:ShapeNetPart}\n\\centering\n\\newcolumntype{g}{>{\\columncolor{Gray}}c}\n\\setlength{\\tabcolsep}{1.5mm}{\n\\begin{adjustbox}{width=\\linewidth} \\small\n\\begin{tabular}{l|c c|cccccccccccccccc}\n\\toprule\nMethods& mIoU$_C$ & mIoU$_I$ & aero  & bag   & cap   & car   & chair & earphone & guitar & knife & lamp  & laptop & motor & mug   & pistol & rocket & skateboard  & table \\\\\n\\midrule\nPointNet\\cite{pointnet} & 80.39 & 83.7  & 83.4  & 78.7  & 82.5  & 74.9  & 89.6  & 73.0    & 91.5  & 85.9  & 80.8  & 95.3  & 65.2  & 93    & 81.2  & 57.9  & 72.8  & 80.6 \\\\\nPointNet++\\cite{pointnet2} & 81.85 & 85.1  & 82.4  & 79    & 87.7  & 77.3  & 90.8  & 71.8  & 91    & 85.9  & 83.7  & 95.3  & 71.6  & 94.1  & 81.3  & 58.7  & 76.4  & 82.6 \\\\\nDGCNN\\cite{wang2019dynamic} & 82.33 & 85.2  & 84    & 83.4  & 86.7  & 77.8  & 90.6  & 74.7  & 91.2  & 87.5  & 82.8  & 95.7 & 66.3  & 94.9  & 81.1  & 63.5  & 74.5  & 82.6 \\\\\n\\midrule\nTransformer & 83.42 & 85.1  & 82.9  & 85.4  & 87.7  & 78.8  & 90.5  & 80.8  & 91.1  & 87.7 & 85.3  & 95.6  & 73.9  & 94.9 & 83.5  & 61.2  & 74.9  & 80.6 \\\\\nTransformer-OcCo & 83.42 & 85.1  & 83.3  & 85.2  & 88.3 &  79.9 & 90.7  & 74.1  & 91.9  & 87.6  & 84.7  & 95.4  & 75.5 & 94.4  & 84.1  & 63.1  & 75.7  & 80.8 \\\\\n\\rowcolor{Gray} Point-BERT & \\textbf{84.11} & \\textbf{85.6}  & 84.3 & 84.8  & 88.0    & 79.8  & 91.0 & 81.7 & 91.6  & 87.9  & 85.2 & 95.6  & 75.6  & 94.7  & 84.3    & 63.4 & 76.3 & 81.5 \\\\\n\\bottomrule\n\\end{tabular}\n\\end{adjustbox}} \\vspace{-7pt}\n\\end{table*}\n\n\\begin{table}[t]\n\\caption{\\small \\textbf{Classification results on the ScanObjectNN dataset.} We report the accuracy (\\%) of three different settings. }  \\vspace{-5pt}\n\\label{tab:ScanNN}\n\\centering\n\\newcolumntype{g}{>{\\columncolor{Gray}}c}\n\\setlength{\\tabcolsep}{1.5mm}{\n\\begin{adjustbox}{width=\\linewidth} \\small\n\\begin{tabular}{l | c c c}\n\\toprule\nMethods & OBJ-BG & OBJ-ONLY & PB-T50-RS \\\\\n\\midrule \nPointNet\\cite{pointnet}& 73.3  & 79.2  & 68.0 \\\\\nSpiderCNN\\cite{xu2018spidercnn} & 77.1  & 79.5  & 73.7 \\\\\nPointNet++\\cite{pointnet2} & 82.3  & 84.3  & 77.9 \\\\\nPointCNN\\cite{li2018pointcnn} & 86.1  & 85.5  & 78.5 \\\\\nDGCNN\\cite{wang2019dynamic} & 82.8  & 86.2  & 78.1 \\\\\nBGA-DGCNN\\cite{uy2019revisiting} & -- & -- & 79.7 \\\\\nBGA-PN++\\cite{uy2019revisiting} & -- & -- & 80.2 \\\\\n\n\\hline\nTransformer & 79.86 & 80.55 & 77.24 \\\\\nTransformer-OcCo & 84.85 & 85.54 & 78.79 \\\\\n\\rowcolor{Gray} Point-BERT & \\textbf{87.43} & \\textbf{88.12} & \\textbf{83.07} \\\\\n\\bottomrule\n\\end{tabular}%\n\\end{adjustbox}} \\vspace{-7pt}\n\\end{table}\n\n\\paragrapha{Object Classification.}\nWe conduct classification experiments on ModelNet40\\cite{modelnet}, %the most popular 3D dataset for shape classification, which contains 12,311 synthesized CAD objects from 40 categories. We follow the previous works to split the dataset into 9843/2468 objects for training and validation. \nIn the classification task, a two-layer MLP with a dropout of 0.5 is used as our classification head. We use AdamW with a weight decay of 0.05 and a learning rate of 0.0005 under a cosine schedule to optimize the model. The batch size is set to 32. \n\nThe results are presented in Table \\ref{tab:cls}. We denote our baseline model as  `Transformer', which is trained on ModelNet40  with random initialization.  Several Transformer-based models are illustrated, where [ST] represents a standard Transformer architecture, and [T] denotes the Transformer model with some special designs or inductive biases. Although we mainly focus on pre-training for standard Transformers in this work, our MPM pre-training strategy is also suitable for other Transformer-based point cloud models\\cite{guo2021pct,zhao2021point}. Additionally, we compare with a recent pre-training strategy OcCo~\\cite{occo}  as a strong baseline of our pre-training method. For fair comparisons, we follow the details illustrated in~\\cite{occo} and use the Transfomer-based decoder PoinTr~\\cite{yu2021pointr} to perform their pretext task.  Combining our Transformer encoder and PoinTr's decoder, we conduct the completion task on ShapeNet, following the idea of OcCo.  We term this model as `Transformer+OcCo'. \n\nWe see pre-training Transformer with OcCo improves 0.7\\%/1.0\\% over the baseline using 1024/4096 inputs. In comparison, our Point-BERT brings 1.8\\%/2.2\\% gains over that of training from scratch. We also observe that adding more points will \\textit{not} significantly improve the Transformer model without pre-training while Point-BERT models can be consistently improved by increasing the number of points. When we increase the density of inputs (4096),  our Point-BERT achieves significantly better performance (93.4\\%) than that with the baseline (91.2\\%) and OcCo (92.2\\%).  Given more input points (8192), our method can be further boosted to 93.8\\% accuracy on ModelNet40. \n \n\n\\paragrapha{Few-shot Learning.}\nWe follow previous work~\\cite{sharma2020self} to evaluate our model under the few-shot learning setting. A typical setting is “$K$-way $N$-shot\", where $K$ classes are first randomly selected, and then ($N$+20) objects are sampled for each class~\\cite{sharma2020self}. The model is trained on $K\\times N$ samples (support set), and evaluated on the remaining 20$K$ samples (query set). We compare Point-BERT with OcCo\\cite{occo}, which achieves state-of-the-art performance on this task. In our experiments, we test the performance under ``5way 10shot\", ``5way 20shot\", ``10way 10shot\" and ``10way 20shot\". We conduct 10 independent experiments under each setting and report the average performance as well as the standard deviation over the 10 runs. We also reproduce DGCNN-rand and DGCNN-OcCo under the same condition for a fair comparison.\n\nAs shown in the Table~\\ref{tab:few-shot}, Point-BERT achieves the best in the few-shot learning. It obtains an absolute improvement of 6.8\\%, 3.0\\%, 6.4\\%, 3.3\\% over the baseline and 0.6\\%, 0.4\\%, 1.6\\%, 0.3\\% over the OcCo-based method on the four settings. The strong results indicate that Point-BERT learns more generic knowledge that can be quickly transferred to new tasks with limited data.\n\n\\paragrapha{Part Segmentation.}\nObject part segmentation is a challenging task aiming to predict a more fine-grained class label for every point.\nWe evaluate the effectiveness of Point-BERT on  ShapeNetPart~\\cite{yi2016scalable}, which contains 16,881 models from 16 categories. Following PointNet~\\cite{pointnet}, we sample 2048 points from each model and increase the group number $g$ from 64 to 128 in the segmentation tasks. We design a segmentation head to propagate the group features to each point hierarchically.\nSpecifically, features from $4^{th}$, $8^{th}$ and the last layer of Transformer are selected, denoted as $\\{ H^4 = \\{h_i^4\\}_{i=1}^g , H^8 = \\{h_i^8\\}_{i=1}^g , H^{12} = \\{h_i^{12}\\}_{i=1}^g \\}$.\n Then we downsample the origin point cloud to 512 and 256 points via FPS, phrased as $P^4 = \\{p^4_i\\}_{i=1}^{512}$ and $ P^8= \\{p^8_i\\}_{i=1}^{256}$. We follow PointNet++~\\cite{pointnet2} to perform feature propagation between $H^4$ and $P^4$, $H^8$ and $P^8$. Here, we can obtain the upsampled feature map $\\hat{H}^4$ and $\\hat{H}^8$, which represent the features for the points in $P^4$ and $P^8$. Then, we can propagate the feature from $H^{12}$ to $\\hat{H^4}$ and finally to every  point. \n\nTwo types of mIoU are reported in Table~\\ref{tab:ShapeNetPart}. It is clear that our Point-BERT outperforms PointNet, PointNet++, and DGCNN. Moreover, Point-BERT improves 0.69\\% and 0.5\\% mIoU over vanilla Transformers, while OcCo fails to improve baseline performance in part segmentation task.\n\n\\paragrapha{Transfer to Real-World Dataset.} We evaluate the generalization ability of the learned representation by pre-training the model on ShapeNet and fine-tuning it on ScanObjectNN~\\cite{uy2019revisiting}, which contains 2902 point clouds from 15 categories. It is a more challenging dataset sampled from real-world scans containing background and occlusions. We follow previous works to conduct experiments on three main variants: OBJ-BG, OBJ-ONLY, and PB-T50-RS. The experimental results are reported in Table~\\ref{tab:ScanNN}. \nAs we can see, Point-BERT improves the vanilla Transformers by about 7.57\\%, 7.57\\%, and 5.83\\% on three variants. \n\nComparing the classification results  on ModelNet40 (Table~\\ref{tab:cls}) and ScanObjectNN (Table~\\ref{tab:few-shot}), we observe that DGCNN outperforms PointNet++ (+2.4\\%) on the ModelNet40. While the superiority is degraded on the real-world dataset ScanObjectNN. As for Point-BERT, it achieves SOTA performance on both datasets, which strongly confirms the effectiveness of our method.\n\n\\begin{table}[t]\n\\small\n\\caption{\\textbf{Ablation study.} We investigate the effects of different designs and report the classification accuracy (\\%) after fine-tuning on ModelNet40. All models are trained with 1024 points. } \\vspace{-5pt}\n\\centering\n\\label{tab:abl}\n\\newcolumntype{g}{>{\\columncolor{Gray}}c}\n\\begin{adjustbox}{width=\\linewidth}\n\\setlength{\\tabcolsep}{5pt}\n\\begin{tabular}[\\linewidth]{c | c c c |c }\n\\toprule\nPretext tasks  & MPM & Point Patch Mixing & Moco & Acc. \\\\\n\\midrule\nModel A  & & & & 91.41 \\\\\nModel B  &\\checkmark & & & 92.58 $\\uparrow$  \\\\\nModel C    &\\checkmark &\\checkmark & & 92.91 $\\uparrow$\\\\\n\\rowcolor{Gray} Model D     &\\checkmark &\\checkmark & \\checkmark & 93.24 $\\uparrow$ \\\\\n\\toprule\nAugmentation  & mask type & mask ratio & replace  & Acc. \\\\\n\\midrule\n\\rowcolor{Gray} Model B & block mask & [0.25, 0.45]  & No & 92.58 \\\\\nModel B & block mask & [0.25, 0.45]  & Yes & 91.81 $\\downarrow$ \\\\\nModel B & rand mask & [0.25, 0.45]  & No & 92.34  $\\downarrow$ \\\\\nModel B & block mask & [0.55, 0.85]  & No & 92.52 $\\downarrow$\\\\\n\\midrule\n\\rowcolor{Gray} Model D & block mask & [0.25, 0.45] & No  & 93.16 \\\\\nModel D & block mask & [0.25, 0.45] & Yes  & 92.58 $\\downarrow$\\\\\nModel D & rand mask & [0.25, 0.45] & No  & 92.91 $\\downarrow$ \\\\\nModel D & block mask & [0.55, 0.85] & No & 92.59 $\\downarrow$ \\\\\n\\bottomrule\n\\end{tabular}\n\\end{adjustbox}\\vspace{-7pt}\n\\end{table}\n\n\\subsection{Ablation Study}\n\\paragrapha{Pretext Task.} We denote model A as our baseline, which is the Transformer training from scratch. Model B presents pre-training Transformer with MPM pretext task. Model C is trained with more samples coming from `point patch mixing' technique. Model D (the proposed method) is trained under the setting of MPM, point patch mixing, and MoCo.  As can be seen in the upper part of Table~\\ref{tab:abl}, Model B with MPM improves the performance about 1.17\\% .  By adopting point patch mixing strategy, Model C gets an improvement of 0.33\\%. With the help of MoCo\\cite{moco}, Model D further brings an improvement of 0.33\\%. \n\n\\paragrapha{Masking Strategy.}  We visualize the point token prediction task in Figure~\\ref{fig:vis}. Our Transformer encoder can reasonably infer the point tokens of the missing patches. In practice, we reconstruct the local patches through the decoder of dVAE, based on the point tokens predicted by the Transformer encoder. Two masking strategies are explored: block-wise masking (block-mask) and random masking (rand-mask). The masking strategy determines the difficulty of the pretext task, influencing reconstruction quality and representations. We further investigate the effects of different masking strategies and provide the results in Table~\\ref{tab:abl}. We see that Model D with block-mask works better at the ratio of $ 25\\% \\sim 45 \\% $.\nUnlike images, which can be split into regular non-overlapping patches, sub-clouds partitioned from the original point cloud often involve overlaps. Thus, rand-mask makes the task easier than block-mask, and further degrades the reconstruction performance.  We also consider another type of augmentations: randomly replace some input embeddings with those from other samples.% We find it unhelpful to our Point-BERT. \n\n\\subsection{Visualization}\n\n\\begin{figure}[t]\n\\centering \\includegraphics[width=\\linewidth]{tsne.png}\n\\caption{\\small \\textbf{Visualization of feature distributions.} We show the t-SNE visualization of feature vectors learned by Point-BERT (a) after pre-training, (b)  after fine-tuning on ModelNet40, and (c) after fine-tuning on ScanObjectNN.}\n\\vspace{-10pt}\n\\label{fig:tsne}\n\\end{figure}\n\nWe visualize the learned features of two datasets via t-SNE~\\cite{van2008visualizing} in Figure~\\ref{fig:tsne}. In figure (a) and (b), the visualized features are from our Point-BERT (a) before fine-tuning and (b) after fine-tuning on ModelNet40. As can be seen, features from different categories can be well separated by our method even before fine-tuning.\nWe also visualize the feature maps on the PB-T50-RS of ScanObjectNN in (c). We can see that separate clusters are formed for each category, indicating the transferability of learned representation to real-world scenarios. It further verifies that Point-BERT helps the Transformer to learn generic knowledge for 3D objects. We also visualize the learning curves of our baseline Transformers and the proposed Point-BERT in Figure~\\ref{fig:curve}. As can be seen, pre-training with our Point-BERT significantly improves the performance of baseline Transformers both in accuracy and speed on both synthetic and real-world datasets. \n\n\\begin{figure}[t]\n\\centering \\includegraphics[width=\\linewidth]{curve.png}\n\\caption{ \\textbf{Learning curve.} We compare the performance of Transformers training from scratch (blue) and pre-training with Point-BERT (red) in terms of training loss and validation accuracy on synthetic and real-world object classification datasets.\n}\n\\vspace{-10pt}\n\\label{fig:curve}\n\\end{figure}\n\n\\section{Conclusion and Discussions}\nWe present a new paradigm for 3D point cloud Transformers through a BERT-style pre-training to learn both low-level structural information and high-level semantic feature. We observe a significant improvement for the Transformer on learning and generalization by comprehensive experiments on several 3D point cloud tasks. We show the potential of standard Transformers in 3D scenarios with appropriate pre-training strategy and look forward to further study on standard Transformers in the 3D domain. \n\nWe do not foresee any negative ethical/societal impacts at this moment. Although the proposed method can effectively improve the performance of standard Transformers on point clouds, the entire `pre-training + fine-tuning' procedure is rather time-consuming, like other Transformers pre-training methods~\\cite{bert, mae, beit}. Improving the efficiency of the training process will be an interesting future direction.\n\n\\subsection*{Acknowledgements}\nThis work was supported in part by the National Key Research and Development Program of China under Grant 2017YFA0700802, in part by the National Natural Science Foundation of China under Grant 62152603, Grant U1813218, in part by a grant from the Beijing Academy of Artificial Intelligence (BAAI), and in part by a grant from the Institute for Guo Qiang, Tsinghua University.\n\n\t{\\small\n    \t\\normalem\n\t\t\t\t\t}\n\t\n\n\\newpage\n\\clearpage\n\\begin{appendix}\n\\section*{Appendix: Implementation Details}\n\n\\subsection*{A. Discrete VAE}\n\\noindent \\textbf{Architecture:}\nOur dVAE consists of a tokenizer and a decoder. Specifically, the tokenizer contains a 4-layer DGCNN~\\cite{wang2019dynamic}, and the decoder involves a 4-layer DGCNN followed by a FoldingNet~\\cite{foldingnet}. The detailed network architecture of our dVAE  is illustrated in Table~\\ref{tab:arc}, where $C_{in}$ and $C_{out}$ are the dimension of input and output features, $C_{middle}$ is the dimension of the hidden layers. $N_{out}$ is the number of point patches in each layer, and  $\\textup{K}$  is the number of neighbors in kNN operation. Additionally, $\\texttt{FoldingLayer}$ concatenates a 2D grids to the inputs and finally generates 3D point clouds. \n\n\\begin{table}[ht]\n\\small\n\\caption{\\textbf{Detailed architecture of our models.} $C_{in}$/$C_{out}$  represents the dimension of input/output features, and $N_{out}$ is the number of points in the query point cloud. $\\textup{K}$ is the number of neighbors in kNN operation. $C_{middle}$ is the dimension of the hidden layers for MLPs.} \n\\centering\n\\label{tab:arc}\n\\setlength{\\tabcolsep}{1.5mm}{\n\\begin{adjustbox}{width=0.45\\textwidth}\n\\begin{tabular}{l | c |  c |c | c |c |c }\n\\toprule\nModule  & Block & $C_{in}$  &  $C_{out}$ & K & $N_{out}$ & $C_{middle}$  \\\\\n \\midrule\n                 &  Linear & 256 & 128 &  &  &    \\\\\n                 &  DGCNN & 128  & 256 & 4 & 64 &    \\\\ \ndVAE Tokenizer   &  DGCNN & 256  & 512 & 4 & 64 &    \\\\ \n                 &  DGCNN & 512  & 512 & 4 & 64 &   \\\\ \t\t\n                 &  DGCNN & 512  & 1024 & 4 & 64 &   \\\\ \n                 &  Linear & 2304 & 8192 &  &  &    \\\\ \n\\midrule[1pt]\t\t\n                &  Linear & 256 & 128 &  &  &    \\\\\n                &  DGCNN & 128  & 256 & 4 & 64 &    \\\\ \n                &  DGCNN & 256  & 512 & 4 & 64 &    \\\\ \n  dVAE Decoder    &  DGCNN & 512  & 512 & 4 & 64 &    \\\\ \t\t\n    &  DGCNN & 512  & 1024 & 4 & 64 &    \\\\ \n                &  Linear & 2304 & 256 &  &  &    \\\\\n                &  MLP   & 256 & 48 &  &  & 1024   \\\\\n                &  FoldingLayer  & 256 & 3 &  &  & 1024 \\\\\n\\midrule[1pt]\nClassification Head   &  MLP  & 768 & $N_{cls}$ &  &  & 256 \\\\\n\\midrule[1pt] \t\t\n              &  MLP  & 387 & 384 &  &  & 384$\\times$4\\\\\n         \t  &  DGCNN & 384  & 512 & 4 & 128 &    \\\\ \t\t\n              &  DGCNN & 512  & 384 & 4 & 128 &    \\\\ \n                &  DGCNN & 384  & 512 & 4 & 256 &    \\\\ \t\t\nSegmentation Head   &  DGCNN & 512  & 384 & 4 & 256 &    \\\\  \t\n                &  DGCNN & 384 & 512 & 4 & 512 &    \\\\\n                &  DGCNN & 512 & 384 & 4 & 512 &    \\\\ \n                &  DGCNN & 384 & 512 & 4 & 2048 &    \\\\ \n              &  DGCNN & 512 & 384 & 4 & 2048 &   \\\\ \n\\bottomrule\n\\end{tabular}\n\\end{adjustbox}}\n\\end{table}\n\n\\paragrapha{Optimization:}\nDuring the training phase, we consider reconstruction loss and distribution loss simultaneously. For reconstruction, we follow PoinTr~\\cite{yu2021pointr} to supervise both coarse-grained prediction and fine-grained prediction with the ground-truth point cloud. The $\\ell_1$-form Chamfer Distance is adopted, which is calculated as:\n\\small\n\\begin{eqnarray} \\centering\nd_{CD}^{\\ell_1}(\\mathcal{P},\\mathcal{G}) = \\frac{1}{|\\mathcal{P}|}\\sum_{p\\in \\mathcal{P}} \\min_{g\\in \\mathcal{G}} \\|p-g\\| + \\frac{1}{|\\mathcal{G}|}\\sum_{g\\in \\mathcal{G}} \\min_{p\\in \\mathcal{P}} \\|g-p\\|,  \n\\end{eqnarray}\n\\normalsize\nwhere $\\mathcal{P}$ represents the prediction point set and $\\mathcal{G}$ represents the ground-truth point set. \nExcept for the reconstruction loss, we follow~\\cite{ramesh2021zero} to optimize the KL-divergence $\\mathcal{L}_{KL}$ between the predicted tokens' distribution and a uniform prior. The final objective function is \n\\begin{small}\n\\begin{eqnarray} \\centering\n\\mathcal{L}_{\\text{dVAE}} = d_{CD}^{\\ell_1}(\\mathcal{P}_{fine},\\mathcal{G}) + d_{CD}^{\\ell_1}(\\mathcal{P}_{coarse},\\mathcal{G}) + \\alpha \\mathcal{L}_{KL}. \n\\end{eqnarray}\n\\end{small}\n\n\\paragrapha{Experiment Setting:}\nWe report the default setting for dVAE training in Table~\\ref{tab:supp_dvae_setting}.\n\n\\begin{table}[t]\n\\caption{\\small \\textbf{Experiment setting for training the dVAE.}} \n\\setlength{\\tabcolsep}{20pt}\n\\begin{tabular}{@{\\hskip 5pt}>{\\columncolor{white}[5pt][\\tabcolsep]}l|c @{\\hskip 5pt}>{\\columncolor{white}[\\tabcolsep][5pt]}cl}\nconfig & value\\\\\n\\midrule[1.5pt]\noptimizer & AdamW~\\cite{loshchilov2018fixing}\\\\\nlearning rate & 5e-4\\\\\nweight decay & 5e-4\\\\\nlearning rate schedule & cosine~\\cite{loshchilov2016sgdr}\\\\\nwarmingup epochs & 10\\\\\naugmentation & RandSampling\\\\\nbatch size & 64\\\\\nnumber of points & 1024\\\\\nnumber of patches & 64\\\\\npatch size & 32\\\\\ntraining epochs & 300\\\\\ndataset & ShapeNet~\\cite{shapenet}\\\\\n\n\\end{tabular} \n\\label{tab:supp_dvae_setting}\n\\centering\n\\end{table}\n\n\\paragrapha{Hyper-parameters of dVAE:} We set the size of the learnable vocabulary to 8192, and each `word' in it is a 256-dim vector. The most important and sensitive hyper-parameters of dVAE are $\\alpha$ for $\\mathcal{L}_{KL}$  and the temperature $\\tau$ for Gumbel-softmax. We set $\\alpha$ to 0 in the first 18 epochs (about 10,000 steps) and gradually increase to 0.1 in the following 180 epochs (about 100,000 steps) using a cosine schedule. As for  $\\tau$, we follow~\\cite{ramesh2021zero} to decay it from 1 to 0.0625 using a cosine schedule in the first 180 epochs (about 100,000 steps). \n\\subsection*{B. Point-BERT}\n\\noindent \\textbf{Architecture: } We follow the standard Transformer~\\cite{vit} architecture in our experiments. It contains a stack of Transformer blocks~\\cite{vaswani2017attention}, and each block consists of a multi-head self-attention layer and a FeedForward Network (FFN). In these two layers, LayerNorm (LN) is adopted.\n\n\\paragrapha{Multi-head Attention: } Multi-head attention mechanism enables the network to jointly consider information from different representation subspaces~\\cite{vaswani2017attention}. Specifically, given the input values $V$, keys $K$ and queries $Q$, the multi-head attention is computed by:\n\\begin{small}\n\\begin{equation}\n    \\begin{split}\n        \\text{MultiHead}(Q, K, V) = W^o \\text{Concat}(\\text{head}_1, ..., \\text{head}_h),\n    \\end{split}\n\\end{equation}\n\\end{small}\n\n\\noindent where $W^o$ is the weights of the last linear layer. The feature of each head can be obtained by:\n\\begin{equation}\n    \\begin{split}\n        \\text{head}_i = \\text{softmax}(\\frac{QW_i^Q (KW_i^K)^T}{\\sqrt{d_k}}) VW_i^V , \n    \\end{split}\n\\end{equation}\n\n\\noindent where $W_i^Q$, $W_i^K$ and $W_i^V$ are the linear layers that project the inputs to different subspaces and $d_k$ is the dimension of the input features.  \n\n\\paragrapha{Feed-forward network (FFN): } Following~\\cite{vaswani2017attention}, two linear layers with ReLU activations and dropout are adopted as the feed-forward network. \n\n\\begin{table}[t]\n\n\\setlength{\\tabcolsep}{20pt}\n\\begin{tabular}{@{\\hskip 5pt}>{\\columncolor{white}[5pt][\\tabcolsep]}l|c @{\\hskip 5pt}>{\\columncolor{white}[\\tabcolsep][5pt]}cl}\nconfig & value\\\\\n\\midrule[1.5pt]\noptimizer & AdamW\\\\\nlearning rate & 5e-4\\\\\nweight decay & 5e-2\\\\\nlearning rate schedule & cosine\\\\\nwarmingup epochs & 3\\\\\naugmentation & ScaleAndTranslate\\\\\nbatch size & 128\\\\\nnumber of points & 1024\\\\\nnumber of patches & 64\\\\\npatch size & 32\\\\\nmask ratio & [0.25, 0.45]\\\\\nmask type & rand mask\\\\\ntraining epochs & 300\\\\\ndataset & ShapeNet\\\\\n\n\\end{tabular} \n\\small\n\\caption{\\textbf{Experiment setting for Point-BERT pre-training}}\n\\label{tab:pretrain}\n\\centering\n\\end{table}\n\n\\begin{table}[t]\n\\setlength{\\tabcolsep}{20pt}\n\\begin{tabular}{@{\\hskip 5pt}>{\\columncolor{white}[5pt][\\tabcolsep]}l|c >{\\columncolor{white}[\\tabcolsep][5pt]}c@{\\hskip 5pt}}\nconfig & value\\\\\n\\midrule[1.5pt]\noptimizer & AdamW\\\\\nlearning rate & 5e-4\\\\\nweight decay & 5e-2\\\\\nlearning rate schedule & cosine\\\\\nwarmingup epochs & 10\\\\\naugmentation & ScaleAndTranslate\\\\\nbatch size & 32($C$),16($S$)\\\\\nnumber of points & 1024($C$),2048 ($S$)\\\\\nnumber of patches & 64($C$),128($S$)\\\\\npatch size & 32\\\\\ntraining epochs & 300\\\\\n\\end{tabular} \n\\small\n\\caption{\\textbf{Experiment setting for end-to-end finetuning.} $S$ represents segmentation task, $C$ represents classification task. } \n\\label{tab:finetuning}\n\\centering\n\\end{table}\n\n\\paragrapha{Point-BERT pre-training:}\nWe report the default setting for our experiments in Point-BERT pretraining in Table~\\ref{tab:pretrain}. The pre-training is conducted on ShapeNet.\n\n\\paragrapha{End-to-end finetuning:}\nWe finetune our Point-BERT model follow the common practice of supervised models strictly. The default setting for end-to-end finetuning is in Table~\\ref{tab:finetuning}.\n\n\\paragrapha{Hyper-parameters of Transformers:}  \nWe set the number of blocks in the Transformer to 12. The number of heads in each multi-head self-attention layer is set to 6. The feature dimension of the transformer layer is set to 384. We follow~\\cite{touvron2021training} to adopt the stochastic depth strategy with a drop rate of 0.1.\n\n\\paragrapha{Classification Head:}\nA two-layer MLP with dropout is applied as our classification head. In classification tasks, we first take the output feature of [CLS] token out, and max-pool the rest of nodes' features. These two features are then combined together and sent into the classification head. The detailed architecture of the classification head is shown in Table~\\ref{tab:arc}, where $N_{cls}$ is the number of classes for a certain dataset.\n\n\\paragrapha{Segmentation Head:}\nThere are no downsampling layers in the standard Transformers, making it challenging to perform dense prediction based on a single-resolution feature map. We adopt an upsampling-propagation strategy to solve this problem, consisting of two steps: 1) Geometry-based feature upsampling and 2) Hierarchical feature propagation. \n\n\\begin{figure}[t]\n\\centering\n\\includegraphics[width = \\linewidth]{segmentationhead.png}\n\\caption{\\small \\textbf{Two main operations of our segmentation head:} 1) Upsampling: upsample the feature map for the sparse point cloud to the dense point cloud. 2) Propagation: propagate the feature hierarchically from deep layers to shallow layers for dense prediction.}\n\\label{fig:supp_seg} \n\\end{figure}\n\nWe extract features from different layers of the Transformer, where features from shallow layers tend to capture low-level information,  while features from deeper layers involve more high-level information. To upsample the feature maps to different resolutions, we first apply FPS to the origin point cloud and obtain point clouds at various resolutions. Then we upsample the feature maps from different layers to different resolutions accordingly. As shown in the left part of Figure~\\ref{fig:supp_seg}, `A' is a point from the dense point cloud, and `a',`b',`c' are its nearest points in the sparser point cloud,  with distance of $d_a$, $d_b$ and $d_c$ respectively. We obtain the point feature of `A' based on the weighted addition of those features, which can be written as:\n\n\\begin{equation}\n    \\begin{split}\n        \\mathcal{F}_A = \\text{MLP} (\\text{Concat}(\\frac{\\sum_{i \\in [a,b,c]} \\frac{1}{d_i} \\mathcal{F}_{i}}{\\sum_{i \\in [a,b,c]} \\frac{1}{d_i}}, p_A)), \n    \\end{split}\n\\end{equation}\n\\noindent where $p_A$ represents the coordinates of point `A'.\n\nAfter obtaining the feature maps at different resolutions, we perform feature propagation from coarse-grained feature maps to fine-grained feature maps. As shown in the right part of Figure~\\ref{fig:supp_seg}, for a point `A' in the dense point cloud, we find its $k$ nearest points in the sparser point cloud. Then a lightweight DGCNN~\\cite{wang2019dynamic} is used to update the feature of `A'. We hierarchically update the feature with the resolution increases and finally obtain the dense feature map, which can be used for segmentation tasks. The detailed architecture for the segmentation head is shown in Table~\\ref{tab:arc}. \n\n\\end{appendix}\n\n\\end{document}\n</paper 1>\n\n<paper 2>\n\\title{Rethinking Network Design and Local Geometry in Point Cloud: A Simple Residual MLP Framework}\n\n\\begin{document}\n\n\\maketitle\n\n\\begin{abstract}\nPoint cloud analysis is challenging due to irregularity and unordered data structure. To capture the 3D geometries, prior works mainly rely on exploring sophisticated local geometric extractors using convolution, graph, or attention mechanisms. These methods, however, incur unfavorable latency during inference, and the performance saturates over the past few years. In this paper, we present a novel perspective on this task. We notice that detailed local geometrical information \\emph{probably is not} the key to point cloud analysis -- we introduce a \\emph{pure residual MLP} network, called PointMLP, which integrates no ``sophisticated\" local geometrical extractors but still performs very competitively. Equipped with a proposed lightweight geometric affine module, PointMLP delivers the new state-of-the-art on multiple datasets. On the real-world ScanObjectNN dataset, our method even surpasses the prior best method by \\textbf{3.3}\\% accuracy. \nWe emphasize that PointMLP achieves this strong performance \\emph{without} any sophisticated operations, hence leading to a superior inference speed. Compared to most recent CurveNet, PointMLP \\textbf{trains 2$\\times$ faster, tests 7$\\times$ faster}, and is more accurate on ModelNet40 benchmark.\nWe hope our PointMLP may help the community towards a better understanding of point cloud analysis. \nThe code is available at \\href{https://github.com/ma-xu/pointMLP-pytorch}{https://github.com/ma-xu/pointMLP-pytorch}.\n\n\\end{abstract}\n\n\\section{Introduction}\nLately, point cloud analysis has emerged as a popular topic in 3D understanding, attracting attention from academia and industry~\\citep{qi2017pointnet,shi2019pointrcnn,xu2020squeezesegv3}.\nDifferent from 2D images represented by regular dense pixels, point clouds are composed of unordered and irregular sets of points $\\mathcal{P}\\in\\mathbb{R}^{N\\times3}$, making it infeasible to apply image processing methods to point cloud analysis directly. Meanwhile, the nature of sparseness and the presence of noises further restrict the performance. In the past few years, endowing with neural networks, point cloud analysis has seen a great improvement in various applications, including 3D shape classification~\\citep{qi2017pointnet}, semantic segmentation~\\citep{hu2020randla} and object detection~\\citep{shi2020point}, etc. \n\nRecent efforts have shown promising results for point cloud analysis by exploring local geometric information, using convolution~\\citep{li2021deepgcns}, graph~\\citep{li2021deepgcns}, or attention mechanism~\\citep{guo2021pct} (see Section~\\ref{sec:related_work} for details).\nThese methods, despite their gratifying results, have mainly relied on the premise that an elaborate local extractor is essential for point cloud analysis, leading to the competition for careful designs that explore fine local geometric properties. Nevertheless, sophisticated extractors are not without drawbacks.\nOn the one hand, due to prohibitive computations and the overhead of memory access, these sophisticated extractors hamper the efficiency of applications in natural scenes. As an example, until now, most 3D point cloud applications are still based on the simple PointNet ( and PointNet++) or the voxel-based methods~\\citep{liu2021group,li2021lidar, zhang2021self}. However, applications that employ the aforementioned advanced methods are rare in literature.\nOn the other hand, the booming sophisticated extractors saturate the performance since they already describe the local geometric properties well. A more complicated design is no longer to improve the performance further. \nThese phenomena suggest that we may need to stop the race of local feature extraction designing, rethinking the necessity of elaborate local feature extractors and further revisiting the succinct design philosophy in point cloud analysis.\n\n\\begin{wrapfigure}{r}{6.5cm}\n    \\centering\n    \\vspace{-2mm}\n    \\includegraphics[width=1\\linewidth]{images/acc_time.pdf}\n    \\vspace{-6mm}\n    \\caption{Accuracy-speed tradeoff on ModelNet40. Our PointMLP performs best. Please refer to Section~\\ref{sec:experiments} for details.}\n    \\vspace{-2mm}\n    \\label{fig:acc_time}\n\\end{wrapfigure}\nIn this paper, we aim at the ambitious goal of building a deep network for point cloud analysis using only residual feed-forward MLPs, without any delicate local feature explorations. By doing so, we eschew the prohibitive computations and continued memory access caused by the sophisticated local geometric extractors and enjoy the advantage of efficiency from the highly-optimized MLPs. To further improve the performance and generalization ability,\nWe introduce a lightweight local geometric affine module that adaptively transforms the point feature in a local region. We term our new network architecture as PointMLP. In the sense of MLP-based design philosophy, our PointMLP is similar to PointNet and PointNet++~\\citep{qi2017pointnet, qi2017pointnet++}. However, our model is more generic and exhibits promising performance. Different from the models with sophisticated local geometric extractors (e.g., DeepGCNs~\\citep{li2019deepgcns}, RSCNN~\\citep{liu2019relation}, RPNet~\\citep{ran2021learning}.), our PointMLP is conceptually simpler and achieves results on par or even better than these state-of-the-art methods (see Figure~\\ref{fig:acc_time}). Keep in mind that we did not challenge the advantages of these local geometric extractors and we acknowledge their contributions; however, a more succinct framework should be studied considering both the efficiency and accuracy.\nIn Table~\\ref{tab:systematic_comparison}, we systemically compare our PointMLP with some representative methods.\n\nEven though the design philosophy is simple, PointMLP (as well as the elite version) exhibits superior performance on 3D point cloud analysis. Specifically, we achieve the state-of-the-art classification performance, \\textbf{94.5\\%}, on the ModelNet40 benchmark, and we outperform related works by \\textbf{3.3\\%} accuracy on the real-world ScanObjectNN dataset, with a significantly higher inference speed.\n\n\\section{Related Work}\n\\label{sec:related_work}\n\n\\paragraph{Point cloud analysis.} There are mainly two streams to process point cloud. \nSince the point cloud data structure is irregular and unordered, some works consider projecting the original point clouds to intermediate voxels~\\citep{maturana2015voxnet,shi2020pv} or images~\\citep{you2018pvnet,li2020end}, translating the challenging 3D task into a well-explored 2D image problem. In this regime, point clouds understanding is largely boosted and enjoys the fast processing speed from 2D images or voxels. Albeit efficient, information loss caused by projection degrades the representational quality of details for point clouds~\\citep{yang2019std}. To this end, some methods are proposed to process the original point cloud sets directly. PointNet~\\citep{qi2017pointnet} is a pioneering work that directly consumes unordered point sets as inputs using shared MLPs. Based on PointNet, PointNet++~\\citep{qi2017pointnet++} further introduced a hierarchical feature learning paradigm to capture the local geometric structures recursively. Owing to the local point representation (and multi-scale information), PointNet++ exhibits promising results and has been the cornerstone of modern point cloud methods~\\citep{wang2019dynamic,fan2021scf,xu2021paconv}. Our PointMLP also follows the design philosophy of PointNet++ but explores a simpler yet much deeper network architecture.\n\n\\paragraph{Local geometry exploration.} As PointNet++ built the generic point cloud analysis network framework, the recent research focus is shifted to how to generate better regional points representation. Predominantly, the explorations of local points representation can be divided into three categories: convolution-, graph-, and attention-based methods. One of the most distinguished convolution-based methods is PointConv~\\citep{wu2019pointconv}. By approximating continuous weight and density functions in convolutional filters using an MLP, PointConv is able to extend the dynamic filter to a new convolution operation. Also, PAConv~\\citep{xu2021paconv} constructs the convolution kernel by dynamically assembling basic weight matrices stored in a weight bank. Without modifying network configurations, PAConv can be seamlessly integrated into classical MLP-based pipelines. Unlike convolution-based methods, Graph-based methods investigate mutually correlated relationships among points with a graph. In~\\citet{wang2019dynamic}, an EdgeConv is proposed to generate edge features that describe the relationships between a point and its neighbors. By doing so, a local graph is built, and the point relationships are well preserved. In 3D-GCN~\\citep{lin2021learning}, authors aim at deriving deformable 3D kernels using a 3D Graph Convolution Network. Closely related to graph-based methods, the attention-based methods exhibit excellent ability on relationship exploration as well, like PCT~\\citep{guo2021pct} and Point Transformer~\\citep{zhao2021point,engel2020point}.\nWith the development of local geometry exploration, the performances on various tasks appear to be saturated. Continuing on this track would bring minimal improvements. In this paper, we showcase that even without the carefully designed operations for local geometry exploration, a pure deep hierarchical MLP architecture is able to exhibit gratifying performances and even better results. \n\n\\begin{wraptable}{r}{8cm}\n    \\centering\n    \\vspace{-3mm}\n    \\caption{Systematic comparison among some representative methods. ``Deep\" indicates that a model is expandable along depth. ``Opt.'' stands for the principal operator.\n    }\n    \\label{tab:systematic_comparison}\n    \\vspace{1mm}\n    \\begin{tabular}{l|cccc}\n        \\toprule\n        Method&hierarchy & locality  & \\makecell[c]{deep} & \\makecell[c]{opt.} \\\\\n        \\midrule\n        PointNet &\\xmark &\\xmark &\\xmark &MLP \\\\\n        PointNet++ &\\cmark &\\cmark &\\xmark & MLP\\\\\n        DGCNN&\\xmark &\\cmark &\\xmark &DGCN  \\\\\n        DeepGCNs &\\cmark&\\cmark&\\cmark&GCN\\\\\n        PointConv &\\cmark &\\cmark &\\xmark &Conv.  \\\\\n        Point Trans. &\\cmark &\\cmark &\\cmark &Atten.  \\\\\n        \\midrule\n        PointMLP&\\cmark &\\cmark &\\cmark &MLP \\\\\n        \\bottomrule\n    \\end{tabular}\n\\end{wraptable}\n\\paragraph{Deep network architecture for point cloud.} Interestingly, the development of point cloud analysis is closely related to the evolution of the image processing network. In the early era, works in the image processing field simply stack several learning layers to probe the performance limitations~\\citep{alexnet, SimonyanZ14a,dong2014learning}. Then, the great success of deep learning was significantly promoted by deep neural architectures like ResNet~\\citep{he2016deep}, which brings a profound impact to various research fields. Recently, attention-based models, including attention blocks~\\citep{wang2018non} and Transformer architectures~\\citep{dosovitskiy2020image}, further flesh out the community. Most recently, the succinct deep MLP architectures have attracted a lot of attention due to their efficiency and generality. \nPoint cloud analysis follows the same develop history as well, from MLP-based PointNet~\\citep{qi2017pointnet}, deep hierarchical PointNet++~\\citep{qi2017pointnet++}, convolution-/graph-/relation- based methods~\\citep{wu2019pointconv, wang2019dynamic, ran2021learning}, to state-of-the-art Transformer-based models~\\citep{guo2021pct,zhao2021point}. \nIn this paper, we abandon sophisticated details and present a simple yet effective deep residual MLP network for point cloud analysis. Instead of following the tendency in the vision community deliberately, we are in pursuit of an inherently simple and empirically powerful architecture for point cloud analysis.\n\n\\section{Deep Residual MLP for Point Cloud}\n\\label{sec:pointmlp}\n\n\\begin{figure}\n    \\centering\n    \\includegraphics[width=1.0\\linewidth]{images/overview.pdf}\n    \\caption{Overview of one stage in PointMLP. Given an input point cloud, PointMLP progressively extracts local features using residual point MLP blocks. In each stage, we first transform the local points using a geometric affine module, then they are extracted before and after the aggregation operation, respectively. PointMLP progressively enlarges the receptive field and models complete point cloud geometric information by repeating multiple stages.}\n    \\label{fig:architecture}\n\\end{figure}\n\nWe propose to learn the point cloud representation by a simple feed-forward residual MLP network (named PointMLP), which hierarchically aggregates the local features extracted by MLPs, and abandons the use of delicate local geometric extractors. To further improve the robustness and improve the performance, we also introduce a lightweight geometric affine module to transform the local points to a normal distribution. The detailed framework of our method is illustrated in Figure~\\ref{fig:architecture}.\n\n\\subsection{Revisiting Point-based Methods}\nThe design of point-based methods for point cloud analysis dates back to the PointNet and PointNet++ papers~\\citep{qi2017pointnet, qi2017pointnet++}, if not earlier. The motivation behind this direction is to directly consume point clouds from the beginning and avoid unnecessary rendering processes.  \n\nGiven a set of points $\\mathcal{P}=\\left \\{ p_i|i=1,\\cdots, N \\right \\}\\in\\mathbb{R}^{N\\times3}$, where $N$ indicates the number of points in a  $\\left(x, y, z\\right)$ Cartesian space, point-based methods aims to directly learn the underlying representation $f$ of $\\mathcal{P}$ using neural networks. One of the most pioneering works is PointNet++, which learns hierarchical features by stacking multiple learning stages. In each stage, $N_s$ points are re-sampled by the farthest point sampling (FPS) algorithm where $s$ indexes the stage and $K$ neighbors are employed for each sampled point and aggregated by max-pooling to capture local structures. Conceptually, the kernel operation of PointNet++ can be formulated as:\n\\begin{equation}\n    g_i = \\mathcal{A}\\left(\\Phi\\left(f_{i,j}\\right)|  j =1,\\cdots, K\\right),\n\\end{equation}\nwhere $\\mathcal{A}\\left(\\cdot\\right)$ means aggregation function (max-pooling in PointNet++), $\\Phi\\left(\\cdot\\right)$ denotes the local feature extraction function (MLP in PointNet++), and $f_{i,j}$ is the $j$-th neighbor point feature of $i$-th sampled point. By doing so, PointNet++ is able to effectively capture local geometric information and progressively enlarge the receptive fields by repeating the operation.\n\nIn the sense of network architecture design, PointNet++ exhibits a universal pipeline for point cloud analysis. Following this pipeline, some plug-and-play methods have been proposed, mainly focusing on the local feature extractor $\\Phi\\left(\\cdot\\right)$~\\citep{xu2021paconv,liu2019relation,thomas2019kpconv,zhao2021point}.\nGenerally, these local feature extractors thoroughly explore the local geometric information using convolution, graph, or self-attention mechanisms. In RSCNN~\\citep{liu2019relation}, the extractor is mainly achieved by exploring point relations as follow:\n\\begin{equation}\n    \\Phi\\left(f_{i,j}\\right) = \\mathrm{MLP}\\left(\\left[\\left \\| x_{i,j}-x_i \\right \\|_2, x_{i,j}-x_i, x_{i,j}, x_i\\right]\\right)*f_{i,j},  \\forall j \\in \\left\\{1,\\cdots, K\\right\\},\n\\end{equation}\nwhere $[\\cdot]$ is the concatenation operation and MLP is a small network composed of a Fully-connected (FC) layer, Batch Normalization layer, and activation function. Unlike RSCNN, Point Transformer introduces the self-attention mechanism into point cloud analysis and considers the similarities between pair-wise points in a local region. To this end, it re-formulates the extractor as:\n\\begin{equation}\n    \\Phi\\left(f_{i}\\right) =\\sum_{j=1}^{k}\\rho \\left ( \\gamma \\left ( \\varphi \\left ( f_i \\right )-\\psi \\left ( f_{i,j} \\right )+\\delta \\right ) \\right )\\odot \\left ( \\alpha \\left ( f_{i,j}+\\delta  \\right ) \\right ),\n    \\label{eq:point_transformer}\n\\end{equation}\nwhere $\\gamma, \\varphi, \\psi$ and $\\alpha$ are linear mapping function, ``$\\odot$\" is a Hadamard product, and $\\rho$ is a softmax normalization. In particular, Point Transformer introduces a relative position encoding, $\\delta=\\theta\\left(x_i-x_{i,j} \\right)$, where the relative position is encoded by two FC layers with a ReLU non-linearity layer, into both attention weights and features. The lightweight positional encoder largely improves the performance of Point Transformer.\n\nWhile these methods can easily take the advantage of detailed local geometric information and usually exhibit promising results, two issues limit their development. First, with the introduction of delicate extractors, the computational complexity is largely increased, leading to prohibitive inference latency~\\footnote{We emphasize that the model complexity could not be simply revealed by FLOPs or parameters, other metrics like memory access cost (MAC) and the degree of parallelism also significantly affect the speed~\\citep{ma2018shufflenet, zhang2020resnest}. However, these important metrics are always ignored in point clouds analysis.}. \nFor example, the FLOPs of Equation~\\ref{eq:point_transformer} in Point Transformer would be $14Kd^2$, ignoring the summation and subtraction operations. Compared with the conventional FC layer that enjoys $2Kd^2$ FLOPs, it increases the computations by times. Notice that the memory access cost is not considered yet.\nSecond, with the development of local feature extractors, the performance gain has started to saturate on popular benchmarks. Moreover, empirical analysis in ~\\citet{liu2020closer} reveals that most sophisticated local extractors make surprisingly similar contributions to the network performance under the same network input.\nBoth limitations encourage us to develop a new method that circumvents the employment of sophisticated local extractors, and provides gratifying results.\n\n\\subsection{Framework of PointMLP}\nIn order to get rid of the restrictions mentioned above, we present a simple yet effective MLP-based network for point cloud analysis that no sophisticated or heavy operations are introduced. The key operation of our PointMLP can be formulated as:\n\\begin{equation}\n    g_i = \\Phi_{pos}\\left(\\mathcal{A}\\left(\\Phi_{pre}\\left(f_{i,j}\\right),|  j=1,\\cdots, K\\right)\\right),\n    \\label{eq:pointMLP_stage}\n\\end{equation}\nwhere $\\Phi_{pre}\\left(\\cdot\\right)$ and $\\Phi_{pos}\\left(\\cdot\\right)$ are residual point MLP blocks: the shared $\\Phi_{pre}\\left(\\cdot\\right)$ is designed to learn shared weights from a local region while the $\\Phi_{pos}\\left(\\cdot\\right)$ is leveraged to extract deep aggregated features. In detail, the mapping function can be written as a series of homogeneous residual MLP blocks, $ \\mathrm{MLP}\\left(x\\right)+x$, in which $\\mathrm{MLP}$ is combined by FC, normalization and activation layers (repeated two times). Following ~\\citet{qi2017pointnet}, we consider the aggregation function $\\mathcal{A}\\left(\\cdot\\right)$ as max-pooling operation.  Equation~\\ref{eq:pointMLP_stage} describes one stage of of PointMLP. For a hierarchical and deep network, we recursively repeat the operation by $s$ stages. Albeit the framework of PointMLP is succinct, it exhibits some prominent merits. 1) Since PointMLP only leverages MLPs, it is naturally invariant to permutation, which perfectly fits the characteristic of point cloud. 2) By incorporating residual connections, PointMLP can be easily extended to dozens layers, resulting deep feature representations. 3) In addition, since there is no sophisticated extractors included and the main operation is only highly optimized feed-forward MLPs, even we introduce more layers, our PointMLP still performs efficiently.  Unless explicitly stated, the networks in our experiments use four stages, and two residual blocks in both $\\Phi_{pre}\\left(\\cdot\\right)$ and $\\Phi_{pos}\\left(\\cdot\\right)$. We employ k-nearest neighbors algorithm (kNN) to select the neighbors and set the number $K$ to 24. \n\n\\subsection{Geometric Affine Module}\nWhile it may be easy to simply increase the depth by considering more stages or stacking more blocks in $\\Phi_{pre}$ and $\\Phi_{pos}$, we notice that a simple deep MLP structure will decrease the accuracy and stability, making the model less robust. This is perhaps caused by the sparse and irregular geometric structures in local regions. Diverse geometric structures among different local regions may require different extractors but shared residual MLPs struggle at achieving this.  We flesh out this intuition and develop a lightweight geometric affine module to tackle this problem. Let $\\left \\{ f_{i,j} \\right \\}_{j=1,\\cdots, k}\\in \\mathbb{R}^{k\\times d}$  be the grouped local neighbors of $f_i\\in \\mathbb{R}^{d}$ containing $k$ points, and each neighbor point $f_{i,j}$ is a $d$-dimensional vector. We transform the local neighbor points by the following formulation:\n\\begin{equation}\n    \\left \\{ f_{i,j} \\right \\} = \\alpha\\odot\\frac{\\left \\{ f_{i,j} \\right \\}-f_i}{\\sigma + \\epsilon} + \\beta, \n    \\quad \\   \n    \\sigma  =\\sqrt{\\frac{1}{k\\times n \\times d}\\sum_{i=1}^n\\sum_{j=1}^{k}\\left(f_{i,j}-f_{i}\\right)^2},\n\\end{equation}\nwhere $\\alpha\\in\\mathbb{R}^{d}$ and $\\beta\\in\\mathbb{R}^{d}$ are learnable parameters, $\\odot$ indicates Hadamard product, and $\\epsilon=1e^{-5}$ is a small number for numerical stability~\\citep{ioffe2015batch,wu2018group,dixon1951introduction}. Note that $\\sigma$ is a scalar describes the feature deviation across all local groups and channels.  By doing so, we transform the points via a normalization operation while maintaining original geometric properties.\n\n\\subsection{Computational Complexity and Elite Version}\nAlthough the FC layer is highly optimized by mainstream deep learning framework, the theoretical number of parameters and computational complexity are still high. To further improve the efficiency, we introduce a lightweight version of PointMLP named as \\textit{pointMLP-elite}, \\textit{with less than \\textbf{0.7M} parameters and prominent inference speed (176 samples/second on ModelNet40 benchmark)}. \n\nInspired by~\\citet{he2016deep,hu2018squeeze}, we present a bottleneck structure for the mapping function $\\Phi_{pre}$ and $\\Phi_{pos}$. We opt to reduce the channel number of the intermediate FC layer by a factor of $r$ and increase the channel number as the original feature map. This strategy is opposite to the design in ~\\citet{vaswani2017attention,touvron2021resmlp} which increases the intermediate feature dimensions. Empirically, we do not observe a significant performance drop. This method reduce the parameters of residual MLP blocks from $2d^2$ to $\\frac{2}{r}d^2$. By default, we set $r$ to 4 in PointMLP-elite.\nBesides, we also slightly adjust the network architecture, reducing both the MLP blocks and embedding dimension number (see appendix for details).\nInspired by~\\citet{xie2017aggregated}, we also investigated a grouped FC operation in the network that divides one FC layer into $g$ groups of sub-FC layers, like group convolution layer. However, we empirically found that this strategy would largely hamper the performance. As a result, we did not consider it in our implementation.\n\n\\begin{table}[]\n\\small\n    \\centering\n    \\caption{Classification results on ModelNet40 dataset. \n With only 1k points, our method achieves state-of-the-art results on both class mean accuracy (mAcc) and overall accuracy (OA) metrics. We also report the speed of some open-sourced methods by samples/second tested on one Tesla V100-pcie GPU and four cores AMD EPYC 7351@2.60GHz CPU. * For KPConv, we take the results from the original paper. The best is marked in \\textbf{bold} and second best is in \\textcolor{blue}{blue}.}\n \\vspace{1mm}\n    \\begin{tabular}{l|ccc|ccc}\n    \\toprule\n         Method& Inputs & mAcc(\\%) &OA(\\%) & Param. &\\makecell{ Train\\\\speed} &\\makecell{ Test\\\\speed} \\\\\n         \\midrule\n         PointNet~\\citep{qi2017pointnet}   & 1k P &86.0 &89.2 & & & \\\\\n         PointNet++~\\citep{qi2017pointnet++} & 1k P &-&90.7  & 1.41M&\\textbf{223.8} &\\textbf{308.5} \\\\\n         PointNet++~\\citep{qi2017pointnet++} &5k P+N &-&91.9  & 1.41M& & \\\\\n         \\midrule\n         PointCNN~\\citep{li2018pointcnn}   &1k P &88.1&92.5  & & & \\\\\n         \n         PointConv~\\citep{wu2019pointconv}  &1k P+N &-&92.5  &18.6M &17.9 &10.2 \\\\\n         KPConv~\\citep{thomas2019kpconv}     & 7k P &-&92.9  &15.2M &31.0* &80.0* \\\\\n         DGCNN~\\citep{wang2019dynamic}      & 1k P &90.2&92.9  & & &  \\\\\n         RS-CNN~\\citep{liu2019relation}     & 1k P &-&92.9  & & & \\\\\n         DensePoint~\\citep{liu2019densepoint} &1k P &-&93.2  & & & \\\\\n         PointASNL~\\citep{yan2020pointasnl}  & 1k P &-&92.9  & & & \\\\\n         PosPool~\\citep{liu2020closer}    &5k P &-&93.2  & & & \\\\\n         Point Trans.~\\citep{engel2020point}  &1k P &-&92.8  & & & \\\\\n         GBNet~\\citep{qiu2021geometric} &1k P &\\textcolor{blue}{91.0} &93.8 &8.39M &16.3 &112 \\\\\n         GDANet~\\citep{xu2021learning}& 1k P &-&93.8  &\\textcolor{blue}{0.93M} &26.3 & 14.0\\\\\n         PA-DGC~\\citep{xu2021paconv}    &1k P &-&93.9  & & & \\\\\n         MLMSPT~\\citep{han2021point}  &1k P &-&92.9  & & & \\\\\n         \n         PCT~\\citep{guo2021pct}        &1k P &-&93.2  & & & \\\\\n         Point Trans.~\\citep{zhao2021point}  &1k P &90.6&93.7  & & & \\\\\n        CurveNet~\\citep{xiang2021walk} &1k P &-&\\textcolor{blue}{94.2}  &2.04M & 20.8&15.0 \\\\\n         \\midrule\n        \n        \n        \n        \n        \n        \n        PointMLP {\\small \\textbf{w/o vot.}}&1k P &91.3 &94.1  &12.6M &47.1 &112 \\\\ %\n        PointMLP {\\small \\textbf{w/ vot.}} &1k P &\\textbf{91.4} &\\textbf{94.5}  &12.6M &47.1 &112\\\\ \n        PointMLP-elite {\\small \\textbf{w/o vot.}} &1k P &90.9 &93.6  &\\textbf{0.68M} &\\textcolor{blue}{116} &\\textcolor{blue}{176} \\\\\n        PointMLP-elite {\\small \\textbf{w/ vot.}} &1k P &90.7 & 94.0 &\\textbf{0.68M} &\\textcolor{blue}{116} &\\textcolor{blue}{176} \\\\ \n        \n         \\bottomrule\n    \\end{tabular}\n    \\label{tab:classification-modelnet40}\n\\end{table}\n\n\\section{Experiments}\n\\label{sec:experiments}\nIn this section, we comprehensively evaluate PointMLP on several benchmarks. Detailed ablation studies demonstrate the effectiveness of PointMLP with both quantitative and qualitative analysis.\n\n\\subsection{Shape classification on ModelNet40}\nWe first evaluate PointMLP on the ModelNet40~\\citep{modelnet40} benchmark, which contains 9,843 training and 2,468 testing meshed CAD models belonging to 40 categories. Following the standard practice in the community, we report the class-average accuracy (mAcc) and overall accuracy (OA) on the testing set. We train all models  for 300 epochs using SGD optimizer.\n\nExperimental results are presented in Table~\\ref{tab:classification-modelnet40}. Among these methods, our PointMLP clearly outperforms state-of-the-art  method CurveNet  by 0.3\\% (94.5\\% \\textit{vs.} 94.2\\%) overall accuracy with only 1k points. Note that this improvement could be considered as a promising achievement since the results on ModelNet40 recent methods have been saturated around 94\\% for a long time.\nEven without the voting strategy~\\citep{liu2019relation}, our PointMLP still performs on par or even better than other methods that are tested with voting strategy.\n\nDespite having better accuracy, our method is much faster than the methods with sophisticated local geometric extractors. We compare PointMLP to several open-sourced methods and report the parameters, classification accuracy, training, and testing speed. As we stated previously, a key intuition behind this experiment is that model complexity can not directly reflect efficiency. For example, CurveNet is lightweight and delivers a strong result, whereas the inference cost is prohibitive \\textbf{(15 samples/second)}. On the contrary, our PointMLP presents a high inference speed \\textbf{(112 samples/second)}. To further reduce the model size and speed up the inference, we present a lightweight PointMLP-elite, which significantly reduces the number of parameters to 0.68M, while maintaining high-performance 90.9\\% mAcc and 94.0\\% OA on ModelNet40. With PointMLP-elite, we further speed up the inference to \\textbf{176 samples/second}.\n\n\\subsection{Shape Classification on ScanObjectNN}\n\\begin{figure}[!t]\n    \\centering\n    \\subfigure[PointMLP 24-Layers]{\n        \n        \\includegraphics[width=0.31\\linewidth]{images/with_without_affine_24.pdf}\n    }\n    \\subfigure[PointMLP 40-Layers]{\n        \\includegraphics[width=0.31\\linewidth]{images/with_without_affine_40.pdf}\n    }\n    \\subfigure[PointMLP 56-Layers]{\n        \\includegraphics[width=0.31\\linewidth]{images/with_without_affine_56.pdf}\n    }\n    \\caption{Four run results (mean $\\pm$ std) of PointMLP with/without our geometric affine module on ScanObjectNN test set. We zoom in on the details of PointMLP40 to show the stability difference.}\n    \\label{fig:affine_module}\n\\end{figure}\n\n\\begin{wraptable}{r}{8.9cm}\n\\small\n    \\centering\n    \\vspace{-7mm}\n    \\caption{Classification results on ScanObjectNN dataset. We examine all methods on the most challenging variant (PB\\_T50\\_RS). For our pointMLP and PointMLP-elite, we train and test for four runs and report mean $\\pm$ std results.\n    }\n    \\label{tab:my_label}\n    \\vspace{1mm}\n    \\begin{tabular}{l|cc}\n        \\toprule\n         Method & mAcc(\\%) &OA(\\%) \\\\\n         \\midrule\n         3DmFV & 58.1&63\\\\\n         PointNet~\\citep{qi2017pointnet} &63.4 &68.2 \\\\\n         SpiderCNN~\\citep{xu2018spidercnn} &69.8 &73.7 \\\\\n         PointNet++~\\citep{qi2017pointnet++} &75.4 &77.9 \\\\\n         DGCNN~\\citep{wang2019dynamic} &73.6 &78.1 \\\\\n         PointCNN~\\citep{li2018pointcnn} &75.1 &78.5 \\\\\n         BGA-DGCNN~\\citep{uy2019revisiting} &75.7 &79.7 \\\\\n         BGA-PN++~\\citep{uy2019revisiting} &77.5 &80.2 \\\\\n         DRNet~\\citep{qiu2021dense} &78.0 &80.3 \\\\\n         GBNet~\\citep{qiu2021geometric} &77.8 &80.5 \\\\\n         SimpleView~\\citep{goyal2021revisiting} & - &80.5$\\pm$0.3 \\\\\n         PRANet~\\citep{cheng2021net} & 79.1&82.1 \\\\\n         MVTN~\\citep{hamdi2021mvtn} & -&82.8 \\\\\n         \\midrule\n         PointMLP \\small{(ours)} &\\textbf{83.9$\\pm$0.5} &\\textbf{85.4$\\pm$0.3}\\\\\n         \n         PointMLP-elite \\small{(ours)} &\\textbf{81.8$\\pm$0.8} &\\textbf{83.8$\\pm$0.6}\\\\\n         \n         \\bottomrule\n    \\end{tabular}\n    \\label{tab:cls_scanobjectNN}\n    \\vspace{-3mm}\n\\end{wraptable}\n\nWhile ModelNet40 is the de-facto canonical benchmark for point cloud analysis, it may not meet the requirement of modern methods due to its synthetic nature and the fast development of point cloud analysis. To this end, we also conduct experiments on the ScanObjectNN benchmark~\\citep{uy2019revisiting}. \n\nScanObjectNN is a recently released point cloud benchmark that contains ~15,000 objects that are categorized into 15 classes with 2,902 unique object instances in the real world. Due to the existence of background, noise, and occlusions, this benchmark poses significant challenges to existing point cloud analysis methods. We consider the hardest perturbed variant (PB\\_T50\\_RS) in our experiments. We train our model using an SGD optimizer for 200 epochs with a batch size of 32. For a better illustration, we train and test our method for four runs and report the mean $\\pm$ standard deviation in Table~\\ref{tab:cls_scanobjectNN}.\n\nEmpirically, \\textbf{our PointMLP surpasses all methods by a significant improvement on both class mean accuracy (mAcc) and the overall accuracy (OA)}. For example, we outperform PRANet by 4.8\\% mAcc and 3.3\\% OA. Even compared with the heavy multi-view projection method MVTN (12 views), our PointMLP still performs much better (85.39\\% \\textit{82.8\\%}). \\textit{Notice that we achieve this by fewer training epochs and did not consider the voting strategy.}\nMoreover, we notice that our method achieves the smallest gap between class mean accuracy and overall accuracy. This phenomenon indicates that PointMLP did not bias to a particular category, showing decent robustness.\n\n\\begin{table}\n\\small\n\\begin{minipage}{0.44\\linewidth}\n\\caption{Classification accuracy of pointMLP on ScanObjectNN test set using 24, 40, and 56 layers, respectively.}\n \\centering\n    \\vspace{1mm}\n    \\begin{tabular}{c|cc}\n    \\toprule\n     Depth& mAcc(\\%) & OA(\\%)  \\\\\n     \\midrule\n     24 layers&83.4$\\pm$0.4 &84.8$\\pm$0.5 \\\\\n     40 layers&\\textbf{83.9$\\pm$0.5} &\\textbf{85.4$\\pm$0.3} \\\\\n     56 layers&83.2$\\pm$0.2 &85.0$\\pm$0.1 \\\\\n     \\bottomrule\n     \n    \\end{tabular}\n    \n    \\label{tab:depth}\n\n\\end{minipage}\n\\hspace{10mm}\n\\begin{minipage}{0.48\\linewidth}  \n\\small\n\\centering\n\\caption{Component ablation studies on ScanObjectNN test set.}\n\\vspace{1mm}\n\\begin{tabular}{ccc|cc}\n\n    \\toprule\n    $\\Phi_{pre}$ & $\\Phi_{pos}$ & Affine & mAcc(\\%) & OA(\\%) \\\\\n    \\midrule\n     \\xmark&\\cmark &\\cmark &80.8$\\pm$0.4& 82.8$\\pm$0.0\\\\\n     \\cmark&\\xmark &\\cmark &83.3$\\pm$0.3 & 84.7$\\pm$0.2\\\\\n     \\cmark&\\cmark &\\xmark &79.1$\\pm$1.7 & 81.5$\\pm$1.4\\\\\n     \\midrule\n     \\cmark&\\cmark &\\cmark & \\textbf{83.9}$\\pm$0.5& \\textbf{85.4$\\pm$0.3}\\\\\n     \\bottomrule\n\\end{tabular}\n\\label{tab:component}   \n\\end{minipage}\n\\end{table}\n\n\\subsection{Ablation studies}\n\\label{sec:ablation}\n\n\\paragraph{Network Depth.}\n     \n    \nNetwork depth has been exploited in many tasks but is rare in point cloud analysis. We first investigate the performance of PointMLP with different depths in Table~\\ref{tab:depth}. We vary the network depth by setting the number of homogeneous residual MLP blocks to 1, 2, and 3, respectively, resulting in 24, 40, and 56-layers PointMLP variants. Detailed depth formulation can be found in Appendix~\\ref{appendix:depth}. At first glance, we notice that simply increasing the depth would not always bring better performance; an appropriate depth would be a good solution. Additionally, the model gets stable with more layers introduced, as demonstrated by the decreasing standard deviation. When the depth is set to 40, we achieve the best tradeoff between accuracy and stability (85.4\\% mean accuracy and 0.3 standard deviations). Remarkably, PointMLP consistently achieves gratifying results that outperform recent methods, regardless of the depth. \n\n\\paragraph{Geometric Affine Module.}  Other work provides sophisticated local geometric extractors to explore geometric structures. Instead, our PointMLP discards these burdensome modules and introduces a lightweight geometric affine module.\nFigure~\\ref{fig:affine_module} presents the results of PointMLP with/without the geometric affine module. By integrating the module, we systematically improve the performance of PointMLP by about 3\\% for all variants. The reasons for this large improvement are two-fold. First, the geometric affine module maps local input features to a normal distribution, which eases the training of PointMLP. Second, the geometric affine module implicitly encodes the local geometrical information by the channel-wise distance to local centroid and variance, remedying the deficiency of geometric information. Besides the gratifying improvements, the geometric affine module also largely boosts the stability of PointMLP, suggesting better robustness.\n\n\\begin{wrapfigure}{r}{0.7\\textwidth}\n    \\centering\n        \n    \\vspace{-6mm}\n    \\subfigure[PointMLP w/o Res.]{\n        \\includegraphics[width=0.400\\linewidth]{images/model31CNoRes_loss_landscape.pdf}\n    }\n    \\hspace{3mm}\n    \\subfigure[PointMLP]{\n        \\includegraphics[width=0.40\\linewidth]{images/model31C_loss_landscape.pdf}\n    }\n    \\caption{\n    Loss landscape along two rand directions. By introducing residual connection, we ease the optimization of PointMLP and achieve a flat landscape like a simple shallow network intuitively.  \n    }\n    \\vspace{-3mm}\n    \\label{fig:losssurface}\n\\end{wrapfigure}\n\n\\paragraph{Component ablation study.} Table~\\ref{tab:component} reports the results on ScanObjectNN of removing each individual component in PointMLP. Consistent with Figure~\\ref{fig:affine_module}, geometric affine module plays an important role in PointMLP,\nimproving the base architecture by 3.9\\%. Remarkably, even without this module, which is an unfair setting for PointMLP,  our base network stills achieves $81.5\\pm1.4\\%$ OA, outperforming most related methods (see Table~\\ref{tab:cls_scanobjectNN}).\nRemoving $\\Phi_{pre}$ function (MLPs before aggregator $\\mathcal{A}$), the performance drops 2.6\\% overall accuracy. Combining all these components together, we achieve the best result 85.4\\% OA. See Appendix~\\ref{appendix:ablation} for more ablations.\n\n\\paragraph{Loss landscape.} We depict the 3D loss landscape~\\citep{li2018visualizing} in Figure~\\ref{fig:losssurface}. Simply increasing the network depth may not achieve a better representation and even hamper the results. When removing the residual connection in PointMLP, the loss landscape turns sharp, and the performance plummets to 88.1\\% (6\\% drop) on ModelNet40. With residual connection, we greatly ease the optimization course of PointMLP and make it possible to train a deep network.\n\n         \n         \n\n\\subsection{Part segmentation}\n\\begin{wrapfigure}{r}{0.6\\textwidth}\n  \\vspace{-7mm}\n  \\begin{center}\n    \\includegraphics[width=0.24\\linewidth]{images/part/901-gt.png}\n    \\includegraphics[width=0.24\\linewidth]{images/part/1-gt.png}\n    \\includegraphics[width=0.24\\linewidth]{images/part/1531-gt.png}\n    \\includegraphics[width=0.24\\linewidth]{images/part/1005-gt.png}\n    \n    \n    \\includegraphics[width=0.24\\linewidth]{images/part/901-predict.png}\n     \\includegraphics[width=0.24\\linewidth]{images/part/1-predict.png}\n    \\includegraphics[width=0.24\\linewidth]{images/part/1531-predict.png}\n    \\includegraphics[width=0.24\\linewidth]{images/part/1005-predict.png}\n  \\end{center}\n  \\vspace{-2mm}\n  \\caption{Part segmentation results on ShapeNetPart. Top line is ground truth and bottom line is our prediction.}\n  \\label{fig:partseg}\n  \\vspace{-2mm}\n\\end{wrapfigure}\nOur PointMLP can also be generalized to other 3D point cloud tasks. We next test PointMLP for 3D shape part segmentation task on the ShapeNetPart benchmark~\\citep{yi2016scalable}. \nThe shapeNetPart dataset consists of 16,881 shapes with 16 classes belonging to 50  parts labels in total. In each class, the number of parts is between 2 and 6. We follow the settings from~\\citet{qi2017pointnet++} that randomly select 2048 points as input for a fair comparison. We compare our methods with several recent works, including SyncSpecCNN~\\citep{yi2017syncspeccnn}, SPLATNet~\\citep{su2018splatnet},  etc. \nWe also visualize the segmentation ground truths and predictions in Figure~\\ref{fig:partseg}. Intuitively, the predictions of our PointMLP are close to the ground truth. Best viewed in color.\n\n\\begin{table*}[]\n    \\centering\n    \\caption{Part segmentation results on the ShapeNetPart dataset. Empirically, our method is much faster than the best method KPConv, and presents a competitive performance.}\n    \\label{tab:part_segmentation}\n    \\vspace{1mm}\n    \\begin{adjustbox}{width=1\\textwidth}\n    \\begin{tabular}{l|cc|cccccccccccccccc}\n        \\toprule \n         Method& \\makecell{ Cls.\\\\mIoU}& \\makecell{ Inst.\\\\mIoU}&aero &bag &cap &car &chair &\\makecell{ aerp-\\\\hone} &guitar &knife &lamp &laptop &\\makecell{ motor-\\\\bike} &mug &pistol &rocket  &\\makecell{ skate-\\\\board} & table \\\\\n         \\midrule\n         PointNet&80.4&83.7 &83.4 &78.7 &82.5 &74.9 &89.6 &73.0 &91.5 &85.9 &80.8 &95.3 &65.2 &93.0 &81.2 &57.9 &72.8 &80.6 \\\\\n         \n         PointNet++&81.9&85.1 &82.4 &79.0 &87.7 &77.3 &90.8 &71.8 &91.0 &85.9 &83.7 &95.3 &71.6 &94.1 &81.3 &58.7 &76.4  &82.6 \\\\\n         \n         Kd-Net&-&82.3 &80.1 &74.6  &74.3 &70.3 &88.6 &73.5 &90.2 &87.2 &81.0 &94.9 &57.4 &86.7 &78.1 &51.8 &69.9 &80.3 \\\\\n         SO-Net&-&84.9 &82.8 &77.8 &88.0 &77.3 &90.6 &73.5 &90.7 &83.9 &82.8 &94.8 &69.1 &94.2 &80.9 &53.1 &72.9 &83.0 \\\\\n         PCNN&81.8&85.1 &82.4 &80.1 &85.5 &79.5 &90.8 &73.2 &91.3 &86.0 &85.0 &95.7 &73.2 &94.8 &83.3 &51.0 &75.0 &81.8 \\\\\n         DGCNN&82.3&85.2 &84.0 &83.4 &86.7 &77.8 &90.6 &74.7 &91.2 &87.5 &82.8 &95.7 &66.3 &94.9 &81.1 &63.5 &74.5 &82.6 \\\\\n         P2Sequence&-&85.2 &82.6 &81.8 &87.5 &77.3 &90.8 &77.1 &91.1 &86.9 &83.9 &95.7 &70.8 &94.6 &79.3 &58.1 &75.2 &82.8 \\\\\n         PointCNN&84.6&86.1&84.1 &86.5 &86.0 &80.8 &90.6 &79.7 &92.3 &88.4 &85.3 &96.1 &77.2 &95.2 &84.2 &64.2 &80.0 &83.0 \\\\\n         PointASNL&-&86.1 &84.1 &84.7 &87.9 &79.7 &92.2 &73.7 &91.0 &87.2 &84.2 &95.8 &74.4 &95.2 &81.0 &63.0 &76.3 &83.2 \\\\\n         RS-CNN&84.0&86.2 &83.5 &84.8 &88.8 &79.6 &91.2 &81.1 &91.6 &88.4 &86.0 &96.0 &73.7 &94.1 &83.4 &60.5 &77.7 &83.6 \\\\\n         SynSpec&82.0&84.7 &81.6 &81.7 &81.9 &75.2 &90.2 &74.9 &93.0 &86.1 &84.7 &95.6 &66.7 &92.7 &81.6 &60.6 &82.9 &82.1 \\\\\n         SPLATNet&83.7&85.4&83.2 &84.3 &89.1 &80.3 &90.7 &75.5 &92.1 &87.1 &83.9 &96.3 &75.6 &95.8 &83.8 &64.0 &75.5 &81.8 \\\\\n         SpiderCNN&82.4&85.3 &83.5 &81.0 &87.2 &77.5 &90.7 &76.8 &91.1 &87.3 &83.3 &95.8 &70.2 &93.5 &82.7 &59.7 &75.8 &82.8 \\\\\n         KPConv&85.1&86.4 &84.6 &86.3 &87.2 &81.1 &91.1 &77.8 &92.6 &88.4 &82.7 &96.2 &78.1 &95.8 &85.4 &69.0 &82.0 &83.6 \\\\\n         PA-DGC&84.6&86.1 &84.3 &85.0 &90.4 &79.7 &90.6 &80.8 &92.0 &88.7 &82.2 &95.9 &73.9 &94.7 &84.7 &65.9 &81.4 &84.0 \\\\\n         \\midrule\n        PointMLP&84.6  &86.1  &83.5  &83.4 &87.5 &80.54  &90.3 &78.2 &92.2  & 88.1 &82.6  & 96.2  &77.5  &95.8  &85.4  &64.6  & 83.3 &84.3 \\\\\n         \\bottomrule\n    \\end{tabular}\n    \\end{adjustbox}\n\\end{table*}\n\n\\section{Conclusion}\nIn this paper, we propose a simple yet powerful architecture named PointMLP for point cloud analysis. The key insight behind PointMLP is that a sophisticated local geometric extractor may not be crucial for performance. We begin with representing local points with simple residual MLPs as they are permutation-invariant and straightforward. Then we introduce a lightweight geometric affine module to boost the performance. To improve efficiency further, we also introduce a lightweight counterpart, dubbed as PointMLP-elite. Experimental results have shown that PointMLP outperforms related work on different benchmarks beyond simplicity and efficiency. We hope this novel idea will inspire the community to rethink the network design and local geometry in point cloud.\n\n\\newpage\n\n\\newpage\n\n\\end{document}\n</paper 2>\n\n<paper 3>\n\\title{ULIP: Learning a Unified Representation of Language, Images, and Point Clouds for 3D Understanding}\n\n\\begin{document}\n\n\\title{ULIP: Learning a Unified Representation of Language, Images, and Point Clouds for 3D Understanding}\n\\author{Le Xue$^{1}$\\thanks{\\ Contact: lxue@salesforce.com},\nMingfei Gao$^{1}$,\nChen Xing$^{1}$,\nRoberto Martín-Martín$^{1, 3}$,\nJiajun Wu$^{2}$,\nCaiming Xiong$^{1}$,\n\\\\\nRan Xu$^{1}$,\nJuan Carlos Niebles$^{1, 2}$, and\nSilvio Savarese$^{1, 2}$\n\\\\\n\\\\\n$^{1}$ Salesforce AI, Palo Alto, USA \\\\\n$^{2}$ Stanford University, Stanford, USA \\quad ${^3}$ UT Austin, Texas, USA \\\\\n{\\tt\\small Project Website: \\href{https://tycho-xue.github.io/ULIP/}{https://tycho-xue.github.io/ULIP/}}}\n\n\\maketitle\n\n\\begin{abstract}\nThe recognition capabilities of current state-of-the-art 3D models are limited by datasets with a small number of annotated data and a pre-defined set of categories.\nIn its 2D counterpart, recent advances have shown that similar problems can be significantly alleviated by employing knowledge from other modalities, such as language.\nInspired by this, leveraging multimodal information for 3D modality could be promising to improve 3D understanding under the restricted data regime, but this line of research is not well studied.\nTherefore, we introduce ULIP to learn a unified representation of images, texts, and 3D point clouds by pre-training with object triplets from the three modalities.\nTo overcome the shortage of training triplets, ULIP leverages a pre-trained vision-language model that has already learned a common visual and textual space by training with massive image-text pairs. Then, ULIP learns a 3D representation space aligned with the common image-text space, using a small number of automatically synthesized triplets.\nULIP is agnostic to 3D backbone networks and can easily be integrated into any 3D architecture.\nExperiments show that ULIP effectively improves the performance of multiple recent 3D backbones by simply pre-training them on ShapeNet55 using our framework, achieving state-of-the-art performance in both standard 3D classification and zero-shot 3D classification on ModelNet40 and ScanObjectNN. ULIP also improves the performance of PointMLP by around 3\\% in 3D classification on ScanObjectNN, and outperforms PointCLIP by 28.8\\% on top-1 accuracy for zero-shot 3D classification on ModelNet40. Our code and pre-trained models are released at \\href{https://github.com/salesforce/ULIP}{https://github.com/salesforce/ULIP}.\n\\end{abstract}\n\n\\section{Introduction}\n\\label{sec:intro}\n\n \n\\begin{figure}[hbt]\n    \\centering\n    \\includegraphics[width=1.0\\linewidth]{figure1_san.pdf}\n    \\caption{Illustration of ULIP. ULIP improves 3D understanding by aligning features from images, texts, and point clouds in the same space. To reduce the demand of 3D data, ULIP leverages image and text encoders that are pre-trained with large-scale image-text pairs, and aligns 3D representation to the pre-aligned image-text feature space using a small scale of training triplets. }\n    \\label{fig:alignment}\n\\end{figure}\n\n3D visual understanding research~\\cite{landrieu2018large, hu2020randla, liu2019densepoint, li2021lidar, graham20183d, choy20163d} is drawing significant attention in recent years due to the increasing demand of real-world applications such as augmented/virtual reality~\\cite{vu2022softgroup, liu2021group, misra2021end, armeni20163d}, autonomous driving~\\cite{yin2021center, li2022deepfusion} and robotics~\\cite{wojek2011monocular, cadena2016multi}.\nHowever, compared to their 2D counterpart, 3D visual recognition research is still limited by datasets with a small number of samples and a small set of pre-determined categories~\\cite{Uy_2019_ICCV, wu20153d}.\nFor example, ShapeNet55~\\cite{chang2015shapenet}, one of the largest publicly available 3D datasets, only contains around 52.5k samples of 3D objects with 55 category labels. \nThat is in contrast to the 2D domain, where ImageNet~\\cite{deng2009imagenet} contains millions of images that cover thousands of categories.\nThis scale limit of 3D data, caused by the high cost of 3D data collection and annotation~\\cite{yu2022point, chang2015shapenet, goyal2021revisiting, wu20153d}, has been hindering the generalization of 3D recognition models and their real-world applications.  \n\nTo tackle the shortage of annotated data,  existing work in other domains shows that employing knowledge from different modalities can significantly help the concept understanding in the original modality\\cite{radford2021learning,xing2019adaptive}. \nAmong such work, CLIP~\\cite{radford2021learning} pioneered alignment between visual and textual features by pre-training on large-scale image-text pairs. It improves state-of-the-art visual concept recognition and enables zero-shot classification of unseen objects.\nHowever, multimodal learning that involves 3D modality, and whether it can help 3D recognition tasks are still not well studied.\n\nIn this paper, we propose Learning a \\textbf{U}nified Representation of \\textbf{L}anguage, \\textbf{I}mages, and \\textbf{P}oint Clouds (ULIP). \nAn illustration of our framework is shown in Figure \\ref{fig:alignment}. \nObtaining a unified representation space of all three modalities requires large-scale triplets of image, text, and point cloud as training data.\nHowever, such triplets remain hard to collect compared to the large-scale image-text pairs available.\nTo circumvent the lack of triplet data, we take advantage of a vision-language model pretrained on massive image-text pairs, and align the feature space of a 3D point cloud encoder to the pre-aligned vision/language feature space. \nWhen training the 3D encoder for space alignments, we use a small number of automatically synthesized triplets from ShapeNet55~\\cite{chang2015shapenet} without requiring manual annotations.\nMaking use of a pretrained vision-language model lets us leverage the abundant semantics captured in the image-text feature space for 3D understanding.\nOur framework uses CLIP as the vision and language model because of its excellent generalization performance. During pre-training, we keep the CLIP model frozen and train the 3D encoder by aligning the 3D feature of an object with its corresponding textual and visual features from CLIP using contrastive learning.\nThe pre-trained 3D backbone model can be further fine-tuned for different downstream tasks.\n\nULIP has three major advantages. First, ULIP can substantially improve the recognition ability of 3D backbone models. Second, ULIP is agnostic to the architecture of 3D models; therefore, we can easily plug in any 3D backbones and improve them with ULIP. Third, aligning three modalities in the same feature space can potentially enable more cross-domain downstream tasks, including zero-shot 3D classification and image-to-3D retrieval.\n\nWe quantitatively evaluate ULIP on two fundamental 3D tasks: standard 3D classification and zero-shot 3D classification. We experiment with recent 3D networks including PointNet++ ~\\cite{qi2017pointnet++}, PointMLP~\\cite{ma2022rethinking} and PointBERT~\\cite{yu2022point}. \nExperimental results show that ULIP achieves state-of-the-art (SOTA) performance for both standard 3D classification and zero-shot 3D classification on ModelNet40 and ScanObjectNN. Specifically, ULIP surpasses PointMLP by around 3\\% in standard 3D classification on ScanObjectNN~\\cite{Uy_2019_ICCV}. ULIP also outperforms PointCLIP~\\cite{zhang2022pointclip} (the previous SOTA) by around 28.8\\% top-1 accuracy in zero-shot 3D classification on ModelNet40. Moreover, we showcase the potential of applying ULIP on the image to point cloud retrieval task. %, where we use real images from Caltech101 as queries and retrieve the top 5 point clouds from all candidates in ModelNet40. \nQualitative evaluation demonstrate our promising potential for cross-modal applications.\n\n\\section{Related Work}\n\\label{sec:related work}\n\\noindent\\textbf{Multi-modal Representation Learning.}\nMost existing multimodal approaches are about image and text modalities. \nAmong these methods, one line of research focuses on learning interaction between image regions and caption words \\cite{tan2019lxmert,chen2020uniter,li2020oscar,lu2019vilbert,li2019visualbert,li2021align} using transformer-based architectures. These methods show great predictive capability while being costly to train. \nThe other line of research, such as CLIP \\cite{radford2021learning}, uses image and text encoders to output a single image/text representation for each image-text pair, and then aligns the representations from both modalities. This simple architecture makes training with massive noisy web data efficient, facilitating its zero-shot generalization capability.\n\nThe success of CLIP has promoted many image-text related research directions, including text-based image manipulation \\cite{patashnik2021styleclip}, open vocabulary object detection \\cite{gu2021open,gao2021towards} and language grounding \\cite{li2022grounded}. Some recent works explore how multi-modal information can help 3D understanding and show promising results \\cite{yan2022let, chen2021multimodal}. The most related method to our work is PointCLIP \\cite{zhang2022pointclip}. It first converts the 3D point cloud into a set of depth maps and then leverages CLIP directly for zero-shot 3D classification. Unlike PointCLIP, which targets reshaping the task of point cloud and text matching to image and text alignment, our method learns a unified representation among images, texts, and point clouds that substantially improves 3D understanding.\n\n\\noindent\\textbf{3D Point Cloud Understanding.}\nThere are mainly two streams of research lines for point cloud modeling. One is projecting a point cloud into 3D voxels \\cite{maturana2015voxnet,shi2020pv} and then using 2D/3D convolutions for feature extraction. PointNet \\cite{qi2017pointnet} explores ingesting 3D point clouds directly. It extracts permutation-invariant feature from the point cloud that significantly impacts point-based 3D networks. PointNet++ \\cite{qi2017pointnet++} proposes a hierarchical neural network that extracts local features with increasing contextual scales. Recently, PointMLP \\cite{ma2022rethinking} proposes a pure residual MLP network and achieves competitive results without integrating sophisticated local geometrical extractors. \nMoreover, self-supervised learning for 3D point clouds has also shown promising performance in 3D understanding field. PointBERT \\cite{yu2022point} adopts mask language modeling from BERT \\cite{devlin2018bert} to the 3D field, where it tokenizes 3D patches using an external model, randomly masks out 3D tokens, and predicts them back during pre-training. A more recent work, PointMAE \\cite{pang2022masked}, directly operates the point cloud by masking out 3D patches and predicting them back using L2 loss. Our method is orthogonal to the above 3D encoders. Their performance on 3D recognition can be potentially improved by ULIP with no/minor modification.\n\n\\section{Learning a Unified Representation of Language,\nImages, and Point Clouds}\n\\label{sec:method}\n\nULIP learns a unified representation space of language, images, and 3D point clouds via pre-training on triplets from these three modalities. \nIn this section, we first introduce how we create such triplets for pre-training. Then, we present our pre-training framework.\n\n\\subsection{Creating Training Triplets for ULIP}\n\\label{sec:create triplet}\n\nWe build our dataset of triplets from ShapeNet55~\\cite{chang2015shapenet}, which is one of the most extensive public 3D CAD datasets. \nShapeNet55 is the publicly-available subset of ShapeNet. \nIt contains around 52.5K CAD models, each of which is associated with metadata that textually describes the semantic information of the CAD model. \nFor each CAD model $i$ in the dataset, we create a triplet $T_i:(I_i, S_i, P_i)$ of image $I_i$, text description $S_i$ and point cloud $P_i$. ULIP will then use these triplets for pre-training. \n\n\\noindent\\textbf{Point Cloud Generation}. We directly use the generated point cloud of each CAD model in ShapeNet55. We uniformly sample $N_p$ points from the original point cloud. During pre-training, standard data augmentation techniques of 3D point clouds are performed, including random point drop, random scaling point cloud, shift point cloud and rotate perturbation.\nThen a 3D encoder takes the augmented point cloud $P_i$ as input and outputs its 3D representation $\\mathbf{h}_i^{P}$ via\n\\begin{equation}\n \\label{eq:3d-rep}\n   \\mathbf{h}_i^{P} = f_P(P_i),\n\\end{equation}\nwhere $f_P(\\cdot)$ represents the 3D backbone encoder.\n\n\\begin{figure*}[t]\n    \\centering\n    \\includegraphics[width=1.0\\linewidth]{figure2_san.pdf}\n    \\caption{Illustration of our method. The inputs of multimodal pre-training (\\textbf{Left}) are a batch of objects represented as triplets (image, text, point cloud). Image and text features are extracted from a pre-trained (frozen) vision and language model such as CLIP, and 3D features are extracted from a 3D encoder. Contrastive losses are applied to align the 3D feature of an object to its image and text features during pre-training. The pre-trained 3D encoders are further fine-tuned in downstream tasks, including standard 3D classification (\\textbf{Top Right}) and zero-shot 3D classification (\\textbf{Bottom Right}).}\n    \\label{fig:method}\n\\end{figure*}\n\n\\noindent\\textbf{Multi-view Image Rendering}. ShapeNet55 CAD models do not come with images. \nTo obtain images that semantically align well with each CAD model, we synthesize multi-view images of each CAD model by placing virtual cameras around each object and rendering the corresponding RGB images and depth maps from each viewpoint.\\footnote{We utilize the following repository with their default settings in practice. \\newline https://github.com/panmari/stanford-shapenet-renderer} Specifically, we render an RGB image with a depth map for every 12 degrees. Therefore, we get 30 RGB images and 30 depth maps for each object, 60 image candidates in total. During each iteration of pre-training, we randomly select one image or depth map from each CAD model's 60 renderred candidates as $I_i$ and take $I_i$ as input of the image encoder $f_I(\\cdot)$ to extract the image feature $\\mathbf{h}_i^I$,\n\\begin{equation}\n \\label{eq:image-rep}\n   \\mathbf{h}_i^{I} = f_I(I_i).\n\\end{equation}\n\n\\noindent\\textbf{Text Generation}. We leverage the metadata that comes with each CAD model as the corresponding text description. The metadata includes a synset of taxonomy as a textual description of each CAD model. For each word in the metadata, we adopt simple prompts to construct meaningful sentences that will be utilized during pre-training. We follow prior works~\\cite{gu2021open,gao2021towards} that use 63 prompts such as \"a picture of [WORD]\" in image-text pre-training tasks and additionally add a dedicated prompt ``a point cloud model of [WORD]\" to accommodate the 3D modality. \nIn each training iteration, we randomly choose a word from the metadata and apply the 64 templates on the word to build a set of text descriptions, $\\mathbf{S}_i$.\nThen we input $\\mathbf{S}_i$ into our text encoder $f_S(\\cdot)$ and get a set of representations, respectively. Finally, we conduct average pooling over the set of outputs as the text-domain representation $\\mathbf{h}_i^{S}$ of object $i$,\n\\begin{equation}\n \\label{eq:text-rep}\n   \\mathbf{h}_i^{S} = Avg(f_S(\\mathbf{S}_i)).\n\\end{equation}\n\n\\subsection{Aligning Representations of Three Modalities}\n\\label{sec:align representation}\nWith the created triplets of image, text, and point cloud, ULIP conducts pre-training to align representations of all three modalities into the same feature space.\nSpecifically, we take advantage of pre-trained vision-language models, i.e., CLIP, and train a 3D encoder by aligning the 3D feature with the features of image and text encoders ($f_I(\\cdot)$ and  $f_S(\\cdot)$) of CLIP.\nBy doing so, we hope that the abundant semantics already captured and aligned by CLIP's encoders can be employed for better 3D understanding.\nThe resulting unified feature space enables numerous cross-modal applications among these three modalities and potentially improves the 3D recognition performance of the underlying 3D backbone encoder $f_P(\\cdot)$.\n\n\\noindent\\textbf{Cross-modal Contrastive Learning.}\nAs shown in Figure \\ref{fig:method}, for an object $i$, features $\\mathbf{h}^I_i$, $\\mathbf{h}^S_i$ and $\\mathbf{h}^P_i$ are extracted from image, text, and 3D point cloud encoders. Then contrastive loss among each pair of modalities is computed as follows, \n\\begin{equation}\n\\begin{aligned}\n L_{(M1, M2)} =\n   \\sum_{(i,j)}-\\frac{1}{2}log\\frac{\\exp\\left(\\frac{\\mathbf{h}^{M_1}_i \\mathbf{h}^{M_2}_j}{\\tau}\\right)}{\\sum_k \\exp\\left(\\frac{\\mathbf{h}^{M_1}_i \\mathbf{h}^{M_2}_k}{\\tau}\\right)} \\\\-\\frac{1}{2}\n    log\\frac{\\exp\\left(\\frac{\\mathbf{h}^{M_1}_i \\mathbf{h}^{M_2}_j}{\\tau}\\right)}{\\sum_k \\exp\\left(\\frac{\\mathbf{h}^{M_1}_k \\mathbf{h}^{M_2}_j}{\\tau}\\right)},\n\\end{aligned}\n\\end{equation}\nwhere $M_1$ and $M_2$ represent two modalities and $(i, j)$ indicates a positive pair in each training batch. We use a learnable temperature parameter $\\tau$ as well, similar to CLIP \\cite{radford2021learning}.\n\nFinally, we minimize $ L_{(M_1, M_2)}$ for all modality pairs with different coefficients, \n\\begin{equation}\n \\label{eq:final loss}\n   L_{final} = \\alpha L_{(I,S)}+ \\beta L_{(I,P)} + \\theta L_{(P,S)}.\n\\end{equation}\nBy default, $\\alpha$ is set to be constant 0, $\\beta$ and $\\theta$ are set to be 1 equally; because during pre-training, we find that if we update CLIP's image and text encoders, catastrophic forgetting will emerge due to our limited data size. This will lead to a significant performance drop when applying ULIP to downstream tasks. Therefore we freeze the weights of $f_S(\\cdot)$ and $f_I(\\cdot)$ during the entire pre-training and only update $f_P(\\cdot)$ with $L_{final}$.\n\n\\section{Experiments}\n\\label{sec:experiments}\nTo demonstrate the benefits of pre-training 3D backbone networks using ULIP, we conduct experiments on two 3D tasks: a standard 3D classification task that involves a single modality and a zero-shot 3D classification task that involves multimodal inputs.\nIn this section, we first present experimental settings, including our experimenting 3D backbones, downstream datasets, and implementation details.\nThen we present the quantitative results of standard 3D classification and zero-shot 3D classification, respectively. Lastly, we include analyses of our model and show results on cross-modal retrieval.\n\n\\subsection{3D Backbone Networks}\nWe experiment with the following 3D backbone networks under our framework.\n\n\\noindent\\textbf{PointNet++} \\cite{qi2017pointnet++} is an advanced version of PointNet \\cite{qi2017pointnet}. It uses a hierarchical structure to better capture the local geometry of the point cloud, and becomes the cornerstone of many point cloud applications.\n\n\\noindent\\textbf{PointBERT}~\\cite{yu2022point} utilizes a transformer architecture for point cloud feature extraction. It improves its recognition ability by conducting self-supervised pre-training on ShapeNet55.\n\n\\noindent\\textbf{PointMLP}~\\cite{ma2022rethinking} is the SOTA method on standard 3D classification task. It uses a residual MLP network with a lightweight geometric affine module to better capture local geometric features.\n\n\\begin{table}[htb]\n    \\small\n    \\centering\n    \\begin{tabular}{lcc}\n    \\toprule\n         Model& Overall Acc & Class-mean Acc \\\\\n         \\midrule\n         PointNet \\cite{qi2017pointnet} &  68.2 & 63.4 \\\\\n         PointNet++ \\cite{qi2017pointnet++} &  77.9 & 75.4 \\\\\n         DGCNN \\cite{wu2018dgcnn} &  78.1 & 73.6 \\\\\n         MVTN \\cite{hamdi2021mvtn} &  82.8 &  --\\\\\n         PointBERT \\cite{yu2022point} &  83.1 &  --\\\\\n         RepSurf-U \\cite{ran2022surface} & 84.6 &  --\\\\\n         PointMAE \\cite{pang2022masked} & 85.2 &  --\\\\\n         RepSurf-U (2x) \\cite{ran2022surface} &  86.0 &  --\\\\\n         \\midrule\n         PointBERT \\cite{yu2022point} &  83.1 &  --\\\\\n         PointBERT + ULIP &  \\textbf{86.4} \\textcolor{DarkGreen}{\\small ($\\uparrow 3.3$)} & --\\\\\n         \\midrule\n         PointMLP \\cite{ma2022rethinking} &  85.7 & 84.4 \\\\\n         PointMLP+ ULIP &  \\textbf{88.8} \\textcolor{DarkGreen}{\\small ($\\uparrow 3.1$)} & \\textbf{87.8} \\textcolor{DarkGreen}{\\small ($\\uparrow 3.4$)} \\\\\n         \\midrule\n         PointMLP \\dag &  86.5 & 85.1 \\\\\n         PointMLP \\dag+ ULIP &  \\textbf{89.4} \\textcolor{DarkGreen}{\\small ($\\uparrow 2.9$)} & \\textbf{88.5} \\textcolor{DarkGreen}{\\small ($\\uparrow 3.4$)} \\\\\n         \\bottomrule\n    \\end{tabular}\n    \\caption{3D classification results on ScanObjectNN. ULIP significantly improves our baselines. Our best result outperforms SOTA largely by around 3\\% on Overall Acc. \\dag  indicates a model uses 2K sampled points and all others use 1K sampled points.}\n    \\label{tab:fintune-scan}\n    \\vspace{-4mm}\n\\end{table}\n\n\\subsection{Downstream Datasets}\nWe use the following two datasets for both standard and zero-shot 3D classification.\n\n\\noindent\\textbf{ModelNet40} is a synthetic dataset of 3D CAD models. It contains 9,843 training samples and 2,468 testing samples, covering 40 categories.\\footnote{For each CAD model, we utilized preprocessed point cloud from \\cite{ma2022rethinking}.}\n\n\\noindent\\textbf{ScanObjectNN} is a dataset of scanned 3D objects from the real world.\nIt contains 2,902 objects that are categorized into 15 categories. It has three variants: \\emph{OBJ\\_ONLY} includes ground truth segmented objects extracted from the scene meshes datasets; \\emph{OBJ\\_BJ} has objects attached with background noises and \\emph{Hardest} introduces perturbations such as translation, rotation, and scaling to the dataset\\cite{Uy_2019_ICCV}.\\footnote{We used the variants provided by \\cite{yu2022point} in our experiments.}\n\n\\subsection{Implementation Details}\n\n\\paragraph{Pre-training.} For the 3D input, we uniformly sample $N_p=$ 1024, 2048, or 8192 points for accommodating the requirements of different backbones. The inputs of image and text modalities are generated as described in Section \\ref{sec:create triplet}. During pre-training, we utilize an advanced version of CLIP, namely SLIP~\\cite{mu2022slip}, that shows superior performance as our image-text encoders. \nAs mentioned in Section \\ref{sec:align representation}, we freeze the image and text encoders and only update the 3D encoder's parameters during pre-training. \nULIP is trained for 250 epochs.\nWe use $64$ as the batch size, $10^{-3}$ as the learning rate, and AdamW as the optimizer. %[TODO: add specific settings]\n\n\\vspace{-10pt}\n\\paragraph{Standard 3D Classification.} On ModelNet40, we use the learning rate as 0.00015 and fine-tune our model for 200 epochs, with the batch size as 24 for PointNet++. \nFor PointMLP, we set the learning rate as 0.1 and fine-tune the model for 300 epochs, with the batch size as 32. \n\nOn ScanObjectNN, we use the learning rate of 0.03 and finetune for 350 epochs with batch size 32 for PointMLP. \nFor PointBERT, we use the learning rate of 0.0002 and finetune for 300 epochs with batch size 32.\n\n\\vspace{-10pt}\n\\paragraph{Zero-Shot 3D Classification.} Following \\cite{zhang2022pointclip}, zero-shot 3D classification is conducted by measuring distances between the 3D features of an object and the text features of category candidates. The category that introduces the smallest distance is selected as the predicted category, as shown in Figure \\ref{fig:method}. We use our pre-trained models as they are when performing zero-shot classification. There is no finetuning stage involved. We keep using the same prompt strategy as it is during pre-training when constructing text features for each category candidate in this task.\n\nAll of our experiments are conducted using PyTorch. Pre-training and finetuning experiments use 8 and 1 A100 GPUs, respectively.\n\n\\subsection{Standard 3D Classification}\nWe demonstrate the effectiveness of ULIP by improving different 3D classification baselines. We follow the original settings of the baselines in our experiments. When applying ULIP, the only difference is that we pre-train the 3D networks under our framework before finetuning them with the labeled point cloud. Since the structure of the 3D backbone is unchanged, our framework does not introduce extra latency during inference time.\nFor all experiments, we follow the community practice of using OA (Overall Accuracy) and mAcc (Class Average Accuracy) as our evaluation metrics.\n\n\\begin{table}[htb]\n    \\small\n    \\centering\n    \\begin{tabular}{lcc}\n    \\toprule\n         Model  &  Overall Acc & Class-mean Acc\\\\\n         \\midrule\n         PointNet \\cite{qi2017pointnet}  & 89.2 & 86.0 \\\\\n         PointCNN \\cite{li2018pointcnn}  & 92.2 & -\\\\\n         SpiderCNN \\cite{xu2018spidercnn} & 92.4 & -\\\\\n         PointConv \\cite{wu2019pointconv} & 92.5 & -\\\\\n         Point Transformer \\cite{zhao2021point} & 92.8 & -\\\\\n         KPConv \\cite{thomas2019kpconv} & 92.9 & -\\\\\n         DGCNN \\cite{wang2019dynamic}  & 92.9 & 90.2 \\\\\n         PCT \\cite{guo2021pct}  & 93.2 & -\\\\\n         RS-CNN* \\cite{liu2019relation}  & 93.6 & -\\\\\n         GDANet \\cite{xu2021learning}  & 93.8 & -\\\\\n         GBNet \\cite{qiu2021geometric}  & 93.8 & 91.0 \\\\\n         MTVN \\cite{hamdi2021mvtn}  & 93.8 & 92.0 \\\\\n         RPNet \\cite{ran2021learning} & 94.1 & -\\\\\n         CurveNet \\cite{xiang2021walk} & 94.2 &- \\\\\n         \\midrule\n         PointNet++(ssg) & 90.7 & -\\\\\n         PointNet++(ssg) + ULIP & \\textbf{93.4} \\textcolor{DarkGreen}{\\small ($\\uparrow 2.7$)} & 91.2 \\\\\n         \\midrule\n         PointBERT  & 93.2 &  -\\\\\n        PointBERT + ULIP & \\textbf{94.1} \\textcolor{DarkGreen}{\\small ($\\uparrow 0.9$)} & - \\\\\n         \\midrule\n         PointMLP  & 94.1 & 91.3 \\\\\n         PointMLP + ULIP  &  \\textbf{94.3} \\textcolor{DarkGreen}{\\small ($\\uparrow 0.2$)} & \\textbf{92.3} \\textcolor{DarkGreen}{\\small ($\\uparrow 1.0$)} \\\\\n         \\midrule\n         PointMLP*  &  94.5 & 91.4 \\\\\n        PointMLP* + ULIP  &  \\textbf{94.7} \\textcolor{DarkGreen}{\\small ($\\uparrow 0.2$)} & \\textbf{92.4} \\textcolor{DarkGreen}{\\small ($\\uparrow 1.0$)}\\\\\n         \\bottomrule\n    \\end{tabular}\n    \\caption{Standard 3D classification results on ModelNet40. ULIP significantly improves our baselines. Our best number achieves new SOTA. * means a voting technique is applied to the method to boost performance.}\n    \\label{tab:fintune-modelnet}\n    \\vspace{-4mm}\n\\end{table}\n\n\\begin{table*}[htbp]\n    \\small\n    \\vspace{-4mm}\n    \\centering\n    \\begin{tabular}{lccccccc}\n         \\toprule\n         \\multirow{2}*{Model} & \\multirow{2}*{Modalitiy aligned} & \\multicolumn{2}{c}{ALL} & \\multicolumn{2}{c}{Medium} & \\multicolumn{2}{c}{Hard}\n         \\\\\n         \\cmidrule(lr){3-4}\\cmidrule(lr){5-6}\\cmidrule(lr){7-8}\n         ~ & ~ & top1 & top5 & top1 & top5 & top1 & top5\n         \\\\\n         \\midrule\n         PointNet++ ssg + ULIP & P+T & 44.9 & 70.3 & 17.2 & 55.0 & 20.3 & 50.1\\\\\n         PointNet++ ssg + ULIP & P+I & 35.3 & 67.2 & 33.6 & 62.4 & 30.1 & 55.1\\\\\n         PointNet++ ssg + ULIP & P+I+T & \\textbf{55.7} & \\textbf{75.7} & \\textbf{35.6} & \\textbf{64.4} & \\textbf{33.7} & \\textbf{55.8}\\\\\n         \\midrule\n         PointNet++ msg + ULIP & P+T & 48.0 & 63.8 & 17.8 & 42.3 & 21.3 & 40.7\\\\\n         PointNet++ msg + ULIP & P+I & 36.4 & 64.4 & 34.7 & 59.0 & 31.0 & 52.0\\\\\n         PointNet++ msg + ULIP & P+I+T & \\textbf{58.4} & \\textbf{78.2} & \\textbf{36.9} & \\textbf{67.2} & \\textbf{33.9} & \\textbf{59.6}\\\\\n         \\midrule\n         PointMLP + ULIP & P+T & 52.2 & 73.0 & 23.3 & 60.8 & 18.1 & 52.2\\\\\n         PointMLP + ULIP & P+I & 34.6 & 64.3 & 31.3 & 61.7 & 27.0 & 53.7\\\\\n         PointMLP + ULIP & P+I+T & \\textbf{61.5} & \\textbf{80.7} & \\textbf{43.2} & \\textbf{72.0} & \\textbf{36.3} & \\textbf{65.0}\\\\\n         \\midrule\n         PointBERT + ULIP & P+T & 44.7 & 66.0 & 19.4 & 49.3 & 14.7 & 39.3\\\\\n         PointBERT + ULIP & P+I & 35.5 & 66.9 & 35.0 & 64.4 & 34.1 & 59.1\\\\\n         PointBERT + ULIP & P+I+T & \\textbf{60.4} & \\textbf{84.0} & \\textbf{40.4} & \\textbf{72.1} & \\textbf{37.1} & \\textbf{66.3}\\\\\n         \\bottomrule\n    \\end{tabular}\n    \\caption{Analysis of aligning three vs. two modalities on zero-shot 3D classification on ModelNet40. Results show that aligning representations of three modalities always produces better results than two modalities.}\n    \\label{tab:ablation-modelnet}\n\\end{table*}\n\n\\begin{table*}[htb]\n    \\small\n    \\centering\n    \\begin{tabular}{lcccccc}\n         \\toprule\n         \\multirow{2}*{Model}  & \\multicolumn{2}{c}{ ALL} & \\multicolumn{2}{c}{Medium} & \\multicolumn{2}{c}{Hard}\n         \\\\\n         \\cmidrule(lr){2-3}\\cmidrule(lr){4-5}\\cmidrule(lr){6-7}\n         ~  & top-1 & top5 & top-1 & top-5 & top-1 & top-5\n         \\\\\n         \\midrule\n         PointCLIP  & 20.2 & -- & 10.4 & --& 8.3 &-- \\\\\n         \\midrule\n         PointNet++(ssg) + ULIP& 55.7 & 75.7 & 35.6 & 64.4 & 33.7 & 55.8\\\\\n         PointNet++(msg) + ULIP & 58.4 & 78.2 & 36.9 & 67.2 & 33.9 & 59.6\\\\\n         PointMLP + ULIP & 61.5 & 80.7 & 43.2 & 72.0 & 36.3 & 65.0\\\\\n         PointBERT + ULIP& \\textbf{60.4} \\textcolor{DarkGreen}{\\small ($\\uparrow 40.2$)} & 84.0 & \\textbf{40.4} \\textcolor{DarkGreen}{\\small ($\\uparrow 30.0$)} & 72.1 & \\textbf{37.1} \\textcolor{DarkGreen}{\\small ($\\uparrow 28.8$)} & 66.3\\\\\n         \\bottomrule\n    \\end{tabular}\n    \\caption{Zero-shot 3D classification on ModelNet40. ULIP-based methods outperform the previous SOTA (PointCLIP) by a very large margin in different evaluation sets.}\n    \\label{tab:zero-shot-modelnet}\n\\end{table*}\n\n\\begin{table}[htb]\n    \\small\n    \\centering\n    \\begin{tabular}{lcc}\n         \\toprule\n         \\multirow{2}*{Model}  & \\multicolumn{2}{c}{ALL}\n         \\\\\n         \\cmidrule{2-3}\n         ~  & top-1 & top-5 \n         \\\\\n         \\midrule\n         PointCLIP & 15.4&-- \\\\\n         \\midrule\n         PointMLP + ULIP &  44.6 & 82.3\\\\\n         PointNet++(ssg)  + ULIP& 45.6 & 73.8\\\\\n         PointBERT + ULIP  & 48.5 & 79.9\\\\\n         PointNet++(msg) + ULIP & \\textbf{49.9} \\textcolor{DarkGreen}{\\small ($\\uparrow 34.5$)} & 78.8\\\\\n         \n         \n         \\bottomrule\n    \\end{tabular}\n    \\caption{Zero-shot 3D classification on ScanObjectNN. ULIP-based methods outperform the previous SOTA (PointCLIP) by a very large margin (at least 29.2\\% on top-1 accuracy).}% scanobjectnn used 2k points.}\n    \\label{tab:zero-shot-scan}\n    \\vspace{-4mm}\n\\end{table}\n\n\\vspace{-10pt}\n\\paragraph{Experimental Results.}\nWe present the standard 3D classification performances of our baselines and our methods on ScanObjectNN in Table~\\ref{tab:fintune-scan}. As shown, the performances of our baselines are significantly improved by ULIP. Specifically, our framework improves PointBERT and PointMLP significantly by around 3\\%.\nWhen we apply ULIP on the strongest backbone, PointMLP, ULIP+PointMLP$\\dag$ achieves the new SOTA performance, and outperforms previous SOTA, RepSurf-U(2$\\times$), by 3.4\\% Overall Accuracy. \n\nIn Table~\\ref{tab:fintune-modelnet}, we show the standard 3D classification results on ModelNet40.\nUnlike ScanObjectNN, which contains scans of real objects, ModelNet40 is a synthetic dataset thus it is easier for classification. The Overall Accuracy of recent methods is already saturated around $94\\%$ on this dataset.\nEven in such a scenario, from Table~\\ref{tab:fintune-modelnet} we can see that ULIP is still able to improve the Overall Accuracy of all of our baselines. Among them, ULIP+PointMLP* achieves a new SOTA.\nFor the class-mean accuracy metric, we also observe decent performance improvement when using ULIP and achieves a new SOTA as well.\n\n\\subsection{Zero-Shot 3D Classification}\nBy aligning the 3D representation with text and image representations, ULIP also enables the 3D backbone networks to conduct tasks involving multiple modalities. We evaluate zero-shot 3D classification in this section.\n\nPointCLIP is the first work and the current SOTA for zero-shot 3D classification. It conducts zero-shot 3D classification by first converting a 3D point cloud into 6 orthogonal depth maps, then using CLIP's image encoder to get ensembled depth map features, and finally using CLIP to match text and depth map features for zero-shot classification. We use it as our major baseline and follow its evaluation protocol in this task. For all experiments, we report top-1 and top-5 OA (Overall Accuracy).\n\n\\begin{table}[htb]\n    \\small\n    \\centering\n    \\begin{tabular}{lccc}\n         \\toprule\n         \\multirow{2}*{Model} & \\multirow{2}*{Modality} & \\multicolumn{2}{c}{ALL}\n         \\\\\n         \\cmidrule{3-4}\n         ~ & ~ & top-1 & top-5 \n         \\\\\n         \\midrule%\\hline\n         PointNet++ ssg + ULIP & P+T & 33.4 & 73.0 \\\\\n         PointNet++ ssg + ULIP & P+I & 35.3 & 72.8\\\\\n         PointNet++ ssg + ULIP & P+I+T & \\textbf{45.6} & \\textbf{73.8}\\\\\n         \\midrule\n         PointNet++ msg + ULIP & P+T & 39.2 & 70.4\\\\\n         PointNet++ msg + ULIP & P+I & 34.9 & 71.3 \\\\\n         PointNet++ msg + ULIP & P+I+T & \\textbf{49.9} & \\textbf{78.8}\\\\\n         \\midrule\n         PointMLP + ULIP & P+T & 41.3 & 76.1 \\\\\n         PointMLP + ULIP & P+I & 33.6 & 74.7 \\\\\n         PointMLP + ULIP & P+I+T & \\textbf{44.6} & \\textbf{82.3}\\\\\n         \\midrule\n         PointBERT + ULIP & P+T & 31.0 & 69.0\\\\\n         PointBERT + ULIP & P+I & 36.3 & 71.3\\\\\n         PointBERT + ULIP & P+I+T & \\textbf{48.5} & \\textbf{79.9}\\\\\n         \\bottomrule\n    \\end{tabular}\n    \\caption{Analysis of aligning three vs. two modalities on zero-shot 3D classification on ScanObjectNN. Results show that aligning representations of three modalities always produces better results than two modalities.}\n    \\label{tab:ablation-scan}\n    \\vspace{-4mm}\n\\end{table}\n\n\\vspace{-10pt}\n\\paragraph{Evaluation Sets.}\n \nTo perform a fair comparison with PointCLIP, we evaluate zero-shot 3D classification on the entire test sets of both ModelNet40 and ScanObjectNN. We refer to this set as \\emph{ALL}.\n\nBesides, we notice that there are some common classes between our pre-train dataset, ShapeNet55, and ModelNet40. Evaluations on these common classes might introduce an unfair comparison of zero-shot performance.\nTo deal with this issue, we create two more sets in ModelNet40, referred to as \\emph{Medium} and \\emph{Hard} for evaluation.\n\n\\noindent\\textit{Medium set}: We remove the ModelNet40 categories whose exact category names exist in our pre-training category list.\n\n\\noindent\\textit{Hard set}: In the ``Medium'' category list, there are still some category names that are synonyms to the pre-training categories, \nsuch as 'cup' vs. 'mug' and 'chair' vs. 'stool.' Therefore, for the ``Hard'' ModelNet40 category list, we remove the categories from the ``Medium'' list with semantically similar counterparts in pre-training categories. \n\n\\begin{figure}[htb]\n    \\centering\n    \\includegraphics[width=1.0\\linewidth]{pointbert_pointmlp_data_efficiency.pdf}\n    \\caption{Data efficiency comparison. The X axis indicates the percentage of samples used for training and Y axis denotes the overall accuracy. Both PointMLP and PointBERT are significantly improved when pre-training with ULIP. }\n    \\label{fig:data-efficiency}\n\\end{figure}\n\\begin{figure*}[htb]\n    \\centering\n    \\includegraphics[width=1.0\\linewidth]{figure3_san.pdf}\n    \\caption{Qualitative results of real image to point cloud retrieval. Query images are from Caltech101, and point clouds are from ModelNet40. We show the top-5 retrieved point cloud models, ranked in order. The results demonstrate the retrieval capability of our model.}\n    \\label{fig:image_pc_retrieval}\n\\end{figure*}\n\\paragraph{Experimental Results.}\nWe present the zero-shot 3D classification results on ModelNet40 in Table~\\ref{tab:zero-shot-modelnet} and the results on ScanObjectNN in Table~\\ref{tab:zero-shot-scan}. We can see that all ULIP-based methods significantly outperform our major baseline, PointCLIP, by a large margin in every evaluation set.\nSpecifically, on the \\emph{Hard set}, our best performing method, ULIP + PointBERT, outperforms PointCLIP by around 29\\% in top-1 accuracy. It also indicates that the superior performance of ULIP-based methods is not caused by pre-training the model on exact/similar categories as the target categories.\nInstead, it suggests that aligning the representations of different modalities can benefit the recognition of rare categories in general. Results in Table \\ref{tab:zero-shot-scan} demonstrate that ULIP-based methods consistently surpass PointCLIP on real scanned objects. Furthermore, all of the 3D backbones outperform the SOTA zero-shot method, PointCLIP, by $\\sim$30\\% with the help of our ULIP framework.\n\n         \n         \n\n\\subsection{Analyses}\n\\label{sec:more analyses}\n\n\\paragraph{Align Representations, Three Modalities or Two?}\nAs described in Eq. \\ref{eq:final loss}, ULIP by default aligns the 3D representation with both the text and image representations during pre-training.\nWe wonder to what extent ULIP will still work if we align the 3D representation to only the text feature or image feature alone.\nIn this section,\nwe conduct an ablation study for ULIP by aligning two rather than three modalities in zero-shot settings.\nResults are shown in Table~\\ref{tab:ablation-scan} and Table~\\ref{tab:ablation-modelnet} for ScanObjectNN and ModelNet40 datasets, respectively. As we can see in both tables, aligning the 3D modality with both text and image modalities consistently achieves the best performance compared to aligning with either image or text modality in every scenario with each baseline.\n\n\\vspace{-10pt}\n\\paragraph{Data Efficiency.}\nModel pre-training could potentially reduce the demand for labeled data during fine-tuning in downstream tasks. We validate the data efficiency of ULIP by comparing it with baselines under a varying number of fine-tuning samples. The comparison results are shown in Figure \\ref{fig:data-efficiency}. As shown in Figure \\ref{fig:data-efficiency} (left), PointMLP's performance is largely improved in the low data regime when pre-trained under the ULIP framework. When we compare PointBERT with PointMLP baselines (two red lines in the two sub-figures), we observe that PointBERT performs better than PointMLP when using less than 20\\% training data. This is because of that the PointBERT model itself is pre-trained on ShapeNet55. Although both ULIP and PointBERT are pretrained on ShapeNet55, ULIP still improves PointBERT by a clear margin, as shown in Figure \\ref{fig:data-efficiency} (right).\n\n\\subsection{Cross-Modal Retrieval}\nAs mentioned in Section~\\ref{sec:intro}, one of the benefits of ULIP is that it enables more cross-modal downstream tasks. Here, we qualitatively show the potential of using ULIP to conduct real image to point cloud retrieval. \n\nWe use our pre-trained ULIP with PointBERT as the 3D encoder directly. We conduct a small-scale experiment with real images from Caltech101 \\cite{fei2004learning} and use the images to retrieve 3D point clouds from around 2.5k samples over 40 categories in ModelNet40. In Figure \\ref{fig:image_pc_retrieval}, we show the top-5 retrieved 3D point cloud models (ranked in order) using image examples from categories of \\emph{chair}, \\emph{airplane}, \\emph{laptop} and \\emph{lamp}. The results show encouraging signs that our pre-trained model has learned meaningful features across image and 3D point cloud modalities. Surprisingly, the top-1 retrieved 3D models have the closest appearance to the query images compared to other retrieved 3D models. For example, when we use images from different aircraft types (fight and airliner) for retrieval (2nd and 3rd rows), the retrieved top-1 point clouds maintain the subtle difference of the query images.\n\n\\section{Conclusions}\n\\label{sec:conclusion}\nWe propose ULIP, a pre-training framework that aligns multiple modalities of images, language, and point clouds in the same feature space. We take advantage of the pre-trained text and image encoders and improve different 3D encoders using our framework. Experiments results show that ULIP can effectively improve representations of 3D backbones. Our method achieves state-of-the-art performance in both zero-shot and standard 3D classification tasks, and our qualitative results show that ULIP has promising potential for cross-modal retrieval applications.\n\n{\\small\n}\n\n\\clearpage\n\n\\end{document}\n</paper 3>\n\nYour summary should follow these steps:\n- Title: Clearly state the main subject or topic of the summary.\n- Introduction: Describe the field and briefly introduce its history. Then introduce current progress and challenges.\n- Introduce the main content of each paper separately. Then summarize their commonalities and innovations.\n- Compare the results of the papers and discuss difference of the results.\n- Conclusion: Summarize the main findings and suggest future research directions.\n\n<keys>\nThe following are the key points to note:\n- If there are important data or mian equation in the given papers, remember to mention them in your summary using Markdown.\n- Use of tables to clearly compare different approaches is encouraged.\n- The first appearance of a professional term must be marked with the full English name and abbreviation.\n- Don't directly copy the papers, write the summary in your own words.\n- Do not include the titles of reference papers directly in your paper.\n</keys>\n\nTotal word count should be about 4000 words.",
    "paper": [
        "arXiv-2111.14819v2.tex",
        "arXiv-2202.07123v2.tex",
        "arXiv-2212.05171v4.tex"
    ],
    "group_id": "group_100",
    "response": "### Summary of Recent Advances in 3D Point Cloud Transformers and MLPs\n\n#### Title: Recent Advances in 3D Point Cloud Transformers and MLPs\n\n#### Introduction\nPoint cloud analysis, a critical component of 3D understanding, has gained significant attention in recent years due to its applications in augmented/virtual reality, autonomous driving, and robotics. Unlike 2D images, which have a regular and ordered structure, point clouds are unordered and sparse, making them challenging to process directly. Traditional methods often rely on projecting point clouds into structured formats like voxels or images, but this approach can lead to information loss. As a result, researchers have increasingly focused on directly consuming point clouds using neural networks, leading to the development of methods like PointNet and PointNet++. These early methods, while pioneering, have limitations in capturing complex geometric structures and high-level semantics. Recent advancements have introduced more sophisticated local geometric extractors, such as convolution, graph, and attention mechanisms, to improve performance. However, these methods often come with increased computational complexity and training time, limiting their practicality in real-world applications. The current challenge is to develop models that can efficiently and effectively capture both local geometric details and high-level semantic information from point clouds, while also being adaptable to various downstream tasks and datasets.\n\n#### Paper 1: Point-BERT - Pre-training 3D Point Cloud Transformers with Masked Point Modeling\nPoint-BERT is a novel approach that extends the concept of BERT (Bidirectional Encoder Representations from Transformers) to 3D point clouds. The paper introduces a Masked Point Modeling (MPM) task to pre-train Transformers specifically for point cloud data. The core idea is to partition the point cloud into local patches, each of which is treated as a discrete token. A discrete Variational AutoEncoder (dVAE) is used to generate these tokens, which are then fed into a Transformer backbone. The backbone is pre-trained by predicting the masked tokens, enabling the model to learn both local geometric patterns and high-level semantic features. The authors demonstrate that their method significantly improves the performance of standard point cloud Transformers on benchmarks like ModelNet40 and ScanObjectNN, achieving state-of-the-art results in few-shot learning and transfer learning tasks. The paper highlights the importance of pre-training strategies in enhancing the scalability and generalization of Transformers for 3D data, providing a new direction for point cloud analysis.\n\n#### Paper 2: PointMLP - A Simple Residual MLP Framework for Point Cloud Analysis\nPointMLP presents a simpler yet powerful architecture for point cloud analysis, focusing on the use of residual MLPs without sophisticated local geometric extractors. The method leverages a lightweight geometric affine module to adaptively transform point features in a local region, thereby improving the robustness and performance of the model. PointMLP is designed to be efficient and effective, achieving state-of-the-art performance on the ModelNet40 benchmark and surpassing previous methods on the real-world ScanObjectNN dataset. The authors argue that detailed local geometrical information is not always necessary for point cloud analysis, and that a more succinct design philosophy can lead to better performance and efficiency. PointMLP trains faster and tests significantly quicker than most recent methods, making it a promising candidate for real-world applications. The paper emphasizes the potential of MLP-based designs in point cloud analysis, offering a new perspective on the field.\n\n#### Paper 3: ULIP - Learning a Unified Representation of Language, Images, and Point Clouds\nULIP introduces a framework for learning a unified representation across language, images, and point clouds, leveraging the pre-trained CLIP model to align these modalities in a common feature space. The method is designed to improve the recognition ability of 3D models by pre-training them on a small number of automatically synthesized triplets from ShapeNet55. ULIP is agnostic to the architecture of 3D models, allowing it to be easily integrated into any existing 3D backbone. The authors demonstrate the effectiveness of ULIP by achieving state-of-the-art performance in both standard and zero-shot 3D classification tasks on ModelNet40 and ScanObjectNN. ULIP also shows promise in cross-modal retrieval tasks, where it can retrieve 3D point clouds from real images. The paper suggests that aligning multiple modalities can significantly enhance the generalization and performance of 3D models, providing a new avenue for multimodal learning in the 3D domain.\n\n#### Commonalities and Innovations\nAll three papers explore the application of Transformer and MLP architectures to 3D point cloud analysis, aiming to improve the efficiency and effectiveness of these models. Point-BERT and PointMLP focus on the design of the backbone network, while ULIP emphasizes the integration of multimodal information. Point-BERT introduces a novel pre-training strategy (Masked Point Modeling) that enables standard Transformers to learn from point cloud data, whereas PointMLP simplifies the network design by using only residual MLPs and a lightweight geometric affine module. ULIP, on the other hand, leverages a pre-trained vision-language model (CLIP) to align the feature spaces of images, texts, and point clouds, thereby improving the recognition ability of 3D models. Each paper contributes to the field by addressing specific challenges: Point-BERT tackles the issue of limited annotated 3D data, PointMLP focuses on reducing computational complexity and improving inference speed, and ULIP addresses the problem of data scarcity by integrating multimodal information.\n\n#### Experimental Results and Comparisons\nThe experimental results of the three papers are impressive, each achieving state-of-the-art performance on different benchmarks. Point-BERT achieves 93.8\\% accuracy on ModelNet40 and 83.1\\% accuracy on ScanObjectNN, surpassing many existing methods. PointMLP outperforms related works on ModelNet40 and ScanObjectNN, with a significant improvement in inference speed. ULIP significantly improves the performance of various 3D backbone networks, achieving new state-of-the-art results on both ModelNet40 and ScanObjectNN, and outperforming the previous SOTA method, PointCLIP, by a large margin in zero-shot classification tasks. \n\nOn the ModelNet40 dataset, Point-BERT achieves 93.2\\%, PointMLP reaches 94.5\\%, and ULIP further boosts PointMLP to 94.7\\%. For the ScanObjectNN dataset, which includes real-world scans, Point-BERT achieves 83.1\\%, PointMLP reaches 85.4\\%, and ULIP improves PointMLP to 88.1\\%. In zero-shot classification, ULIP-based methods outperform PointCLIP by around 30\\% in top-1 accuracy on both ModelNet40 and ScanObjectNN. These results highlight the effectiveness of each method in different scenarios, with ULIP showing the most significant improvements in zero-shot tasks.\n\n#### Conclusion\nThe three papers collectively showcase the potential of Transformer and MLP architectures in enhancing 3D point cloud analysis. Point-BERT demonstrates the effectiveness of pre-training strategies in improving the performance of standard Transformers, while PointMLP emphasizes the importance of a succinct and efficient network design. ULIP, by integrating multimodal information, provides a new direction for improving the generalization and performance of 3D models. The results suggest that these methods can significantly enhance the recognition ability of 3D models, making them more adaptable to real-world applications. Future research could focus on further improving the efficiency of these models, especially in the context of large-scale pre-training and fine-tuning, as well as exploring their applicability in more complex and diverse 3D tasks. Additionally, the integration of these models with other modalities, such as videos or audio, could provide new insights into multimodal learning in the 3D domain."
}